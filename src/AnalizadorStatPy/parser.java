
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatPy;

import java_cup.runtime.*;
import statpyconverter.Config;
import statpyconverter.Variable;
import statpyconverter.Token;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\016\011" +
    "\000\002\006\004\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\017\011\000" +
    "\002\020\004\000\002\021\011\000\002\022\004\000\002" +
    "\022\003\000\002\027\010\000\002\023\020\000\002\024" +
    "\013\000\002\025\015\000\002\010\007\000\002\010\005" +
    "\000\002\011\007\000\002\011\005\000\002\012\011\000" +
    "\002\012\011\000\002\012\005\000\002\013\007\000\002" +
    "\014\011\000\002\014\011\000\002\014\005\000\002\015" +
    "\007\000\002\015\013\000\002\015\014\000\002\015\011" +
    "\000\002\015\013\000\002\015\014\000\002\015\011\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\016\000\002\030\003" +
    "\000\002\030\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\005\000\002\026\005\000\002\026\007\000\002" +
    "\026\007\000\002\026\004\000\002\026\006\000\002\026" +
    "\007\000\002\026\007\000\002\031\011\000\002\031\011" +
    "\000\002\031\011\000\002\031\011\000\002\032\004\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\007\000\002\034\005\000\002\035\007\000\002\035\005" +
    "\000\002\036\011\000\002\036\011\000\002\036\005\000" +
    "\002\037\007\000\002\040\011\000\002\040\011\000\002" +
    "\040\005\000\002\041\004\000\002\041\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\050\004\000\002\050\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\042\007\000\002\042\011\000\002\043\007\000\002\043" +
    "\011\000\002\044\007\000\002\044\011\000\002\045\013" +
    "\000\002\046\007\000\002\046\005\000\002\046\003\000" +
    "\002\046\016\000\002\046\004\000\002\047\013\000\002" +
    "\053\007\000\002\053\011\000\002\054\013\000\002\055" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\004\035\005\001\002\000\006\002\ufffd\035" +
    "\ufffd\001\002\000\004\036\013\001\002\000\004\002\000" +
    "\001\002\000\004\002\012\001\002\000\006\002\ufffe\035" +
    "\005\001\002\000\004\002\uffff\001\002\000\004\002\001" +
    "\001\002\000\004\005\014\001\002\000\004\006\015\001" +
    "\002\000\004\012\016\001\002\000\034\030\033\031\042" +
    "\032\025\033\045\034\046\035\027\037\017\040\024\041" +
    "\035\042\022\045\036\046\044\047\030\001\002\000\004" +
    "\005\u0164\001\002\000\042\013\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\066\ufff4\001" +
    "\002\000\042\013\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\066\uffed\001\002\000\004" +
    "\005\u0156\001\002\000\042\013\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\066\uffee\001" +
    "\002\000\004\005\u0140\001\002\000\004\066\u0135\001\002" +
    "\000\042\013\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\066\ufff8\001\002\000\012\051" +
    "\211\052\207\053\212\066\210\001\002\000\004\012\175" +
    "\001\002\000\042\013\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\066\ufff5\001\002\000" +
    "\042\013\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\066\ufff3\001\002\000\004\066\170" +
    "\001\002\000\040\013\ufffa\030\033\031\042\032\025\033" +
    "\045\034\046\035\027\037\017\040\024\041\035\042\022" +
    "\044\ufffa\045\036\046\044\047\030\001\002\000\004\040" +
    "\024\001\002\000\004\005\151\001\002\000\042\013\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\066\ufff6\001\002\000\042\013\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\044\uffef\045\uffef\046\uffef\047\uffef\066" +
    "\uffef\001\002\000\042\013\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\066\ufff2\001\002" +
    "\000\004\066\111\001\002\000\042\013\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\066" +
    "\ufff9\001\002\000\004\005\101\001\002\000\004\066\075" +
    "\001\002\000\004\066\054\001\002\000\004\013\053\001" +
    "\002\000\042\013\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\066\ufff1\001\002\000\042" +
    "\013\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\066\ufff0\001\002\000\042\013\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\066\ufff7\001\002\000\006\002\ufffc\035\ufffc\001\002" +
    "\000\006\004\056\062\055\001\002\000\006\007\057\010" +
    "\060\001\002\000\042\013\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\066\uffd9\001\002" +
    "\000\006\026\062\066\061\001\002\000\006\026\062\066" +
    "\061\001\002\000\032\004\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\013\uffc8\015\uffc8\020\067\026\062\063\uffc8\064" +
    "\uffc8\066\061\001\002\000\030\004\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\013\uffc7\015\uffc7\026\062\063\uffc7\064" +
    "\uffc7\066\061\001\002\000\004\010\064\001\002\000\004" +
    "\004\065\001\002\000\042\013\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\045\uffda\046\uffda\047\uffda\066\uffda\001" +
    "\002\000\024\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\015\uffc6\063\uffc6\064\uffc6\001\002\000\006\026" +
    "\062\066\061\001\002\000\024\004\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\013\uffc5\015\uffc5\063\uffc5\064\uffc5\001" +
    "\002\000\024\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\015\uffc4\063\uffc4\064\uffc4\001\002\000\004\007" +
    "\073\001\002\000\004\004\074\001\002\000\042\013\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\066\uffdb\001\002\000\004\062\076\001\002\000" +
    "\004\066\077\001\002\000\004\004\100\001\002\000\042" +
    "\013\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\066\uffdc\001\002\000\004\066\102\001" +
    "\002\000\004\061\103\001\002\000\006\026\062\066\061" +
    "\001\002\000\004\006\105\001\002\000\004\012\106\001" +
    "\002\000\034\030\033\031\042\032\025\033\045\034\046" +
    "\035\027\037\017\040\024\041\035\042\022\045\036\046" +
    "\044\047\030\001\002\000\004\013\110\001\002\000\042" +
    "\013\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\066\uffe5\001\002\000\006\004\113\062" +
    "\112\001\002\000\014\005\115\014\116\022\114\026\120" +
    "\027\117\001\002\000\042\013\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\066\uffe0\001" +
    "\002\000\014\005\115\014\116\022\114\026\120\027\117" +
    "\001\002\000\014\005\115\014\116\022\114\026\120\027" +
    "\117\001\002\000\004\012\133\001\002\000\016\004\uffcb" +
    "\006\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\001\002\000" +
    "\016\004\uffcc\006\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\001\002\000\014\004\125\021\122\022\123\023\126\024" +
    "\124\001\002\000\014\005\115\014\116\022\114\026\120" +
    "\027\117\001\002\000\014\005\115\014\116\022\114\026" +
    "\120\027\117\001\002\000\014\005\115\014\116\022\114" +
    "\026\120\027\117\001\002\000\042\013\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\066" +
    "\uffe1\001\002\000\014\005\115\014\116\022\114\026\120" +
    "\027\117\001\002\000\016\004\uffce\006\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\001\002\000\016\004\uffcd\006\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\001\002\000\016\004" +
    "\uffcf\006\uffcf\021\uffcf\022\uffcf\023\126\024\124\001\002" +
    "\000\016\004\uffd0\006\uffd0\021\uffd0\022\uffd0\023\126\024" +
    "\124\001\002\000\004\050\134\001\002\000\004\015\135" +
    "\001\002\000\004\010\136\001\002\000\006\026\062\066" +
    "\061\001\002\000\004\010\140\001\002\000\004\015\141" +
    "\001\002\000\004\010\142\001\002\000\004\066\143\001" +
    "\002\000\004\010\144\001\002\000\004\013\145\001\002" +
    "\000\016\004\uffc9\006\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\001\002\000\014\006\147\021\122\022\123\023\126" +
    "\024\124\001\002\000\016\004\uffca\006\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\001\002\000\016\004\uffd1\006\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\001\002\000\034\030" +
    "\033\031\042\032\025\033\045\034\046\035\027\037\017" +
    "\040\024\041\035\042\022\045\036\046\044\047\030\001" +
    "\002\000\004\066\153\001\002\000\004\061\154\001\002" +
    "\000\006\026\062\066\061\001\002\000\004\004\156\001" +
    "\002\000\004\066\157\001\002\000\004\021\160\001\002" +
    "\000\004\021\161\001\002\000\004\006\162\001\002\000" +
    "\004\012\163\001\002\000\034\030\033\031\042\032\025" +
    "\033\045\034\046\035\027\037\017\040\024\041\035\042" +
    "\022\045\036\046\044\047\030\001\002\000\004\013\165" +
    "\001\002\000\042\013\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\066\uffe6\001\002\000" +
    "\042\013\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\066\uffeb\001\002\000\006\013\ufffb" +
    "\044\ufffb\001\002\000\006\004\172\062\171\001\002\000" +
    "\014\005\115\014\116\022\114\026\120\027\117\001\002" +
    "\000\042\013\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\066\uffe2\001\002\000\014\004" +
    "\174\021\122\022\123\023\126\024\124\001\002\000\042" +
    "\013\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\066\uffe3\001\002\000\034\030\033\031" +
    "\042\032\025\033\045\034\046\035\027\037\017\040\024" +
    "\041\035\042\022\045\036\046\044\047\030\001\002\000" +
    "\004\013\177\001\002\000\004\046\200\001\002\000\004" +
    "\005\201\001\002\000\004\066\202\001\002\000\004\061" +
    "\203\001\002\000\014\005\115\014\116\022\114\026\120" +
    "\027\117\001\002\000\014\006\205\021\122\022\123\023" +
    "\126\024\124\001\002\000\004\004\206\001\002\000\042" +
    "\013\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\066\uffe4\001\002\000\004\005\377\001" +
    "\002\000\004\005\372\001\002\000\004\005\305\001\002" +
    "\000\004\005\213\001\002\000\004\006\214\001\002\000" +
    "\004\012\215\001\002\000\006\031\224\034\222\001\002" +
    "\000\010\013\uff9b\031\uff9b\034\uff9b\001\002\000\010\013" +
    "\uff9c\031\uff9c\034\uff9c\001\002\000\004\013\304\001\002" +
    "\000\010\013\uff9e\031\224\034\222\001\002\000\006\016" +
    "\263\054\264\001\002\000\010\013\uff9d\031\uff9d\034\uff9d" +
    "\001\002\000\004\016\225\001\002\000\004\017\226\001" +
    "\002\000\004\056\227\001\002\000\004\062\230\001\002" +
    "\000\004\012\231\001\002\000\014\010\234\014\235\015" +
    "\232\026\062\066\061\001\002\000\014\010\234\014\235" +
    "\015\232\026\062\066\061\001\002\000\004\013\260\001" +
    "\002\000\006\026\062\066\061\001\002\000\004\012\241" +
    "\001\002\000\006\013\uff91\015\237\001\002\000\014\010" +
    "\234\014\235\015\232\026\062\066\061\001\002\000\004" +
    "\013\uff92\001\002\000\004\050\242\001\002\000\004\015" +
    "\243\001\002\000\004\010\244\001\002\000\006\026\062" +
    "\066\061\001\002\000\004\010\246\001\002\000\004\015" +
    "\247\001\002\000\004\010\250\001\002\000\004\066\251" +
    "\001\002\000\004\010\252\001\002\000\004\013\253\001" +
    "\002\000\004\013\uff90\001\002\000\004\010\255\001\002" +
    "\000\004\015\256\001\002\000\014\010\234\014\235\015" +
    "\232\026\062\066\061\001\002\000\004\013\uff93\001\002" +
    "\000\004\004\261\001\002\000\010\013\uff8a\031\uff8a\034" +
    "\uff8a\001\002\000\004\013\uff8f\001\002\000\004\017\274" +
    "\001\002\000\004\062\265\001\002\000\006\010\267\066" +
    "\266\001\002\000\004\004\273\001\002\000\004\066\270" +
    "\001\002\000\004\010\271\001\002\000\004\004\272\001" +
    "\002\000\010\013\uff8c\031\uff8c\034\uff8c\001\002\000\010" +
    "\013\uff8d\031\uff8d\034\uff8d\001\002\000\004\055\275\001" +
    "\002\000\004\062\276\001\002\000\004\012\277\001\002" +
    "\000\014\010\234\014\235\015\232\026\062\066\061\001" +
    "\002\000\004\013\301\001\002\000\004\004\302\001\002" +
    "\000\010\013\uff8b\031\uff8b\034\uff8b\001\002\000\004\013" +
    "\uff9f\001\002\000\042\013\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\066\uffba\001\002" +
    "\000\004\006\306\001\002\000\004\012\307\001\002\000" +
    "\014\030\311\031\314\032\323\033\313\034\321\001\002" +
    "\000\016\013\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\001\002\000\004\066\365\001\002\000\016\013\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\001\002\000" +
    "\004\066\361\001\002\000\004\066\354\001\002\000\004" +
    "\013\353\001\002\000\016\013\uffb7\030\311\031\314\032" +
    "\323\033\313\034\321\001\002\000\016\013\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\001\002\000\016\013" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\001\002" +
    "\000\004\066\337\001\002\000\016\013\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\001\002\000\004\066\324" +
    "\001\002\000\006\004\326\062\325\001\002\000\006\007" +
    "\327\010\330\001\002\000\016\013\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\001\002\000\004\066\334\001" +
    "\002\000\004\066\331\001\002\000\004\010\332\001\002" +
    "\000\004\004\333\001\002\000\016\013\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\001\002\000\004\007\335" +
    "\001\002\000\004\004\336\001\002\000\016\013\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\001\002\000\006" +
    "\004\341\062\340\001\002\000\006\007\342\010\343\001" +
    "\002\000\016\013\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\001\002\000\006\026\062\066\061\001\002\000" +
    "\006\026\062\066\061\001\002\000\004\010\345\001\002" +
    "\000\004\004\346\001\002\000\016\013\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\001\002\000\004\007\350" +
    "\001\002\000\004\004\351\001\002\000\016\013\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\001\002\000\004" +
    "\013\uffb8\001\002\000\042\013\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\066\uffbc\001" +
    "\002\000\006\004\356\062\355\001\002\000\014\005\115" +
    "\014\116\022\114\026\120\027\117\001\002\000\016\013" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\001\002" +
    "\000\014\004\360\021\122\022\123\023\126\024\124\001" +
    "\002\000\016\013\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\001\002\000\004\062\362\001\002\000\004\066" +
    "\363\001\002\000\004\004\364\001\002\000\016\013\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\001\002\000" +
    "\006\004\367\062\366\001\002\000\014\005\115\014\116" +
    "\022\114\026\120\027\117\001\002\000\016\013\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\001\002\000\014" +
    "\004\371\021\122\022\123\023\126\024\124\001\002\000" +
    "\016\013\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\001\002\000\004\006\373\001\002\000\004\012\374\001" +
    "\002\000\034\030\033\031\042\032\025\033\045\034\046" +
    "\035\027\037\017\040\024\041\035\042\022\045\036\046" +
    "\044\047\030\001\002\000\004\013\376\001\002\000\042" +
    "\013\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\066\uffb9\001\002\000\004\006\u0100\001" +
    "\002\000\004\012\u0101\001\002\000\006\031\u0102\034\u0108" +
    "\001\002\000\004\016\u012d\001\002\000\004\013\u012c\001" +
    "\002\000\010\013\uffa2\031\uffa2\034\uffa2\001\002\000\010" +
    "\013\uffa3\031\uffa3\034\uffa3\001\002\000\010\013\uffa1\031" +
    "\uffa1\034\uffa1\001\002\000\010\013\uffa4\031\uffa4\034\uffa4" +
    "\001\002\000\012\016\u010d\054\u010f\057\u010e\060\u010c\001" +
    "\002\000\010\013\uffa0\031\uffa0\034\uffa0\001\002\000\010" +
    "\013\uffa5\031\u0102\034\u0108\001\002\000\004\013\uffa6\001" +
    "\002\000\004\062\u0125\001\002\000\004\017\u011e\001\002" +
    "\000\004\062\u0117\001\002\000\004\062\u0110\001\002\000" +
    "\006\010\u0112\066\u0111\001\002\000\004\004\u0116\001\002" +
    "\000\004\066\u0113\001\002\000\004\010\u0114\001\002\000" +
    "\004\004\u0115\001\002\000\010\013\uff99\031\uff99\034\uff99" +
    "\001\002\000\010\013\uff9a\031\uff9a\034\uff9a\001\002\000" +
    "\006\010\u0119\066\u0118\001\002\000\004\004\u011d\001\002" +
    "\000\004\066\u011a\001\002\000\004\010\u011b\001\002\000" +
    "\004\004\u011c\001\002\000\010\013\uff97\031\uff97\034\uff97" +
    "\001\002\000\010\013\uff98\031\uff98\034\uff98\001\002\000" +
    "\004\055\u011f\001\002\000\004\062\u0120\001\002\000\004" +
    "\012\u0121\001\002\000\014\010\234\014\235\015\232\026" +
    "\062\066\061\001\002\000\004\013\u0123\001\002\000\004" +
    "\004\u0124\001\002\000\010\013\uff94\031\uff94\034\uff94\001" +
    "\002\000\006\010\u0127\066\u0126\001\002\000\004\004\u012b" +
    "\001\002\000\004\066\u0128\001\002\000\004\010\u0129\001" +
    "\002\000\004\004\u012a\001\002\000\010\013\uff95\031\uff95" +
    "\034\uff95\001\002\000\010\013\uff96\031\uff96\034\uff96\001" +
    "\002\000\042\013\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\066\uffbb\001\002\000\004" +
    "\017\u012e\001\002\000\004\056\u012f\001\002\000\004\062" +
    "\u0130\001\002\000\004\012\u0131\001\002\000\014\010\234" +
    "\014\235\015\232\026\062\066\061\001\002\000\004\013" +
    "\u0133\001\002\000\004\004\u0134\001\002\000\010\013\uff8e" +
    "\031\uff8e\034\uff8e\001\002\000\006\004\u0137\062\u0136\001" +
    "\002\000\006\007\u0138\010\u0139\001\002\000\042\013\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\066\uffdd\001\002\000\004\066\u013d\001\002\000" +
    "\004\066\u013a\001\002\000\004\010\u013b\001\002\000\004" +
    "\004\u013c\001\002\000\042\013\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde\066\uffde\001" +
    "\002\000\004\007\u013e\001\002\000\004\004\u013f\001\002" +
    "\000\042\013\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\066\uffdf\001\002\000\006\065" +
    "\u0141\066\u0142\001\002\000\004\066\u014e\001\002\000\004" +
    "\061\u0148\001\002\000\004\006\u0144\001\002\000\004\012" +
    "\u0145\001\002\000\034\030\033\031\042\032\025\033\045" +
    "\034\046\035\027\037\017\040\024\041\035\042\022\045" +
    "\036\046\044\047\030\001\002\000\004\013\u0147\001\002" +
    "\000\042\013\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\066\uffec\001\002\000\006\026" +
    "\062\066\061\001\002\000\010\006\uffc3\063\u014a\064\u014b" +
    "\001\002\000\006\065\u0141\066\u0142\001\002\000\006\065" +
    "\u0141\066\u0142\001\002\000\004\006\uffc1\001\002\000\004" +
    "\006\uffc2\001\002\000\006\006\uffc0\061\u014f\001\002\000" +
    "\006\026\u0152\066\u0150\001\002\000\014\006\uffc8\020\067" +
    "\026\062\065\u0141\066\u0153\001\002\000\004\006\uffbf\001" +
    "\002\000\012\006\uffc7\026\062\065\u0141\066\u0153\001\002" +
    "\000\014\006\uffc8\020\067\026\062\061\u0148\066\061\001" +
    "\002\000\004\006\uffbd\001\002\000\004\006\uffbe\001\002" +
    "\000\004\066\u0157\001\002\000\004\006\u0158\001\002\000" +
    "\004\012\u0159\001\002\000\004\043\u015a\001\002\000\006" +
    "\026\062\066\061\001\002\000\006\013\uffe8\043\uffe8\001" +
    "\002\000\006\013\u015d\043\u015a\001\002\000\042\013\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\066\uffea\001\002\000\006\013\uffe9\043\uffe9\001" +
    "\002\000\004\011\u0160\001\002\000\034\030\033\031\042" +
    "\032\025\033\045\034\046\035\027\037\017\040\024\041" +
    "\035\042\022\045\036\046\044\047\030\001\002\000\004" +
    "\044\u0162\001\002\000\004\004\u0163\001\002\000\006\013" +
    "\uffe7\043\uffe7\001\002\000\020\005\115\007\u0165\010\u0166" +
    "\014\116\022\114\026\120\027\117\001\002\000\006\026" +
    "\062\066\061\001\002\000\006\026\062\066\061\001\002" +
    "\000\014\006\u0168\021\122\022\123\023\126\024\124\001" +
    "\002\000\004\004\u0169\001\002\000\042\013\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\066\uffd8\001\002\000\006\010\u016c\011\u016b\001\002\000" +
    "\004\010\u0173\001\002\000\006\006\u016e\021\u016d\001\002" +
    "\000\004\066\u0170\001\002\000\004\004\u016f\001\002\000" +
    "\042\013\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\066\uffd2\001\002\000\004\006\u0171" +
    "\001\002\000\004\004\u0172\001\002\000\042\013\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\066\uffd4\001\002\000\004\021\u0174\001\002\000\004" +
    "\066\u0175\001\002\000\004\006\u0176\001\002\000\004\004" +
    "\u0177\001\002\000\042\013\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\066\uffd3\001\002" +
    "\000\006\007\u017a\011\u0179\001\002\000\004\007\u0181\001" +
    "\002\000\006\006\u017c\021\u017b\001\002\000\004\066\u017e" +
    "\001\002\000\004\004\u017d\001\002\000\042\013\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\066\uffd5\001\002\000\004\006\u017f\001\002\000\004" +
    "\004\u0180\001\002\000\042\013\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\066\uffd7\001" +
    "\002\000\004\021\u0182\001\002\000\004\066\u0183\001\002" +
    "\000\004\006\u0184\001\002\000\004\004\u0185\001\002\000" +
    "\042\013\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\066\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\012\002\006\003\005\004\007\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\010\004\007\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\046\007" +
    "\033\010\042\011\025\012\051\013\036\014\030\015\017" +
    "\017\031\020\040\021\047\023\050\024\037\025\022\031" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\166\007\033\010\042\011\025" +
    "\012\051\013\036\014\030\015\017\017\031\020\040\021" +
    "\047\023\050\024\037\025\022\031\020\001\001\000\004" +
    "\017\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\071\001\001" +
    "\000\004\030\062\001\001\000\004\030\067\001\001\000" +
    "\004\030\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\106\007\033" +
    "\010\042\011\025\012\051\013\036\014\030\015\017\017" +
    "\031\020\040\021\047\023\050\024\037\025\022\031\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\120\001\001\000\002\001\001\000\004" +
    "\005\147\001\001\000\004\005\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\131\001\001\000\004\005\130\001\001\000" +
    "\004\005\127\001\001\000\002\001\001\000\004\005\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\151\010\042\011\025\012\051\013\036\014\030\015" +
    "\017\017\031\020\040\021\047\023\050\024\037\025\022" +
    "\031\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\163\007\033\010\042\011\025" +
    "\012\051\013\036\014\030\015\017\017\031\020\040\021" +
    "\047\023\050\024\037\025\022\031\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\175\007\033\010\042\011\025\012\051\013\036\014\030" +
    "\015\017\017\031\020\040\021\047\023\050\024\037\025" +
    "\022\031\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\050\217\052\220\053\222\054\216\055" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\050\302\052\220\053\222\054\216\055" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\235\046\232\001\001" +
    "\000\006\030\235\046\261\001\001\000\002\001\001\000" +
    "\004\030\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\235\046\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\235\046\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\235\046" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\314\033\315\034\316" +
    "\035\307\036\317\037\311\040\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\032\351\033" +
    "\315\034\316\035\307\036\317\037\311\040\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\346\001\001\000\004\030\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\374\007\033\010" +
    "\042\011\025\012\051\013\036\014\030\015\017\017\031" +
    "\020\040\021\047\023\050\024\037\025\022\031\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\041\u0102\042\u0106\043\u0104\044" +
    "\u0103\045\u0105\047\u0108\051\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\041\u010a\042\u0106\043\u0104\044\u0103\045" +
    "\u0105\047\u0108\051\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\235\046\u0121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\235\046\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u0142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\u0145\007\033\010\042\011\025\012" +
    "\051\013\036\014\030\015\017\017\031\020\040\021\047" +
    "\023\050\024\037\025\022\031\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0148\001\001\000\002" +
    "\001\001\000\004\026\u014c\001\001\000\004\026\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u0150\001\001\000\006\026\u0154\030\067\001" +
    "\001\000\002\001\001\000\006\026\u0153\030\065\001\001" +
    "\000\004\030\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\u015b\027\u015a\001\001\000\004\030\u015e\001" +
    "\001\000\002\001\001\000\004\027\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\u0160\007\033\010\042\011\025\012\051\013\036\014\030" +
    "\015\017\017\031\020\040\021\047\023\050\024\037\025" +
    "\022\031\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0166\001\001\000\004\030" +
    "\u0177\001\001\000\004\030\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    Config cf = new Config();
    ArrayList<Variable> arr = new ArrayList<>();
    ArrayList<Token> toks = new ArrayList<>();
    String tituloGB = "";
    String tituloGBX = "";
    String tituloGBY = "";
    String[] ejeXGB;
    String[] valoresGB;
    String tituloGP = "";
    String[] ejeXGP;
    String[] valoresGP;

    public void guardarGlobales(String tipo, String nombre, String dato) {
        Variable varr = new Variable(tipo, nombre, dato);
        arr.add(varr);
        //System.out.println(varr.getNombre()+" -> "+varr.getDato());
    }

    public String buscarGlobales(String nombre){
        for(int i =0; i<arr.size();i++){
            if(arr.get(i).getNombre().equals(nombre)){
                return arr.get(i).getDato();
            }
        }
        return "";
    }

    public void listaTokens(String lexema,String token,String linea,String columna){
        Token tk = new Token(lexema,token,linea,columna);
        toks.add(tk);
        //System.out.println("lexema:"+lexema+" token:"+token+" linea:"+linea+" columna:"+columna);
    }

    public void htmlTokens(ArrayList<Token> tk){
        try {
            try (FileWriter fileWriter = new FileWriter("C:\\Users\\1998j\\OneDrive\\Desktop\\compi1\\proyecto1\\StatPyConverter\\src\\Reportes\\tokens.html")) {
                for(int i = 0; i<tk.size();i++){
                fileWriter.write("<p>Token: "+tk.get(i).getToken()+ " Lexema:"+tk.get(i).getLexema()+
                " Linea:"+tk.get(i).getLinea()+" Columna:"+tk.get(i).getColumna()+"</p><br>");
                }
            }
        } catch (IOException e) {
            System.out.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cf.Escribir(String.valueOf(a));htmlTokens(toks);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cf.Escribir(String.valueOf(a));htmlTokens(toks);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= wVoid wMain PAR_IZQ PAR_DER LLI declaraciones LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=String.valueOf(a);
    listaTokens(t1,"wVoid",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"wMain",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_IZQ",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"PAR_DER",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"LLI",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"LLC",String.valueOf(t6left),String.valueOf(t6right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="\n\t"+String.valueOf(a) +"\n\t"+ String.valueOf(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=String.valueOf(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= declaracionINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracionDOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declaracionCHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= declaracionBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= declaracionSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= declaracionPRINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= sentenciaIF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= sentenciaELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= sentenciaSWITCH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= sentenciaFOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= sentenciaWHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= sentenciaDOWHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= declaracionFUNCIONES 
            {
              Object RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaIF ::= wIF PAR_IZQ CONDICIONES PAR_DER LLI declaraciones LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = "if " + a +":\n" + String.valueOf(b);
    listaTokens(t1,"wIF",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_DER",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"LLI",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"LLC",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaELSE ::= wELSE sentenciaIF 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = "el"+a;        
    listaTokens(t1,"wELSE",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaELSE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaSWITCH ::= wSWITCH PAR_IZQ identificador PAR_DER LLI sentenciaCASE LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT ="def switcher(case,"+a+"):\n\tswitcher={"+b+"\n\t}" ;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"wSWITCH",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_DER",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"LLI",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"LLC",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSWITCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaCASE ::= sentenciaCASE CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\t" +a + "\n\t" + String.valueOf(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCASE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaCASE ::= CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\n\t" +a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCASE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASE ::= wCASE CADENA DOSPT declaraciones wBREAK PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+":"+b;
    listaTokens(t1,"wCASE",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"DOSPT",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"wBREAK",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"PTCOMA",String.valueOf(t4left),String.valueOf(t4right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaFOR ::= wFOR PAR_IZQ declaracion identificador RELACIONES CADENA PTCOMA identificador MAS MAS PAR_DER LLI declaraciones LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] dec = String.valueOf(a).split("=");                                                                
    RESULT="for "+dec[0]+" in range("+dec[1]+","+d+"):"+g;
    listaTokens(t1,"wFOR",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_DER",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    listaTokens(t3,"PTCOMA",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(f,"identificador",String.valueOf(fleft),String.valueOf(fright));
    listaTokens(t4,"MAS",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"MAS",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PAR_DER",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"LLI",String.valueOf(t7left),String.valueOf(t7right));
    listaTokens(t8,"LLC",String.valueOf(t8left),String.valueOf(t8right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaWHILE ::= wWHILE PAR_IZQ identificador RELACIONES CADENA PAR_DER LLI declaraciones LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = "while " + a+" "+b+" "+c+":\n" + String.valueOf(d);
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"wWHILE",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_DER",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"LLI",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"LLC",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWHILE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaDOWHILE ::= wDO LLI declaraciones LLC wWHILE PAR_IZQ identificador RELACIONES expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="while True:"+a+"\n\t"+b+"="+b+"+1\n\tif("+b+c+d+"):\nbreak";
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    listaTokens(t1,"wDO",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"LLI",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"LLC",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"wWHILE",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PAR_IZQ",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PAR_DER",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"PTCOMA",String.valueOf(t7left),String.valueOf(t7right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDOWHILE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionINT ::= varINT identificador IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+b;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PTCOMA",String.valueOf(t3left),String.valueOf(t3right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionINT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionINT ::= varINT identificador PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PTCOMA",String.valueOf(t2left),String.valueOf(t2right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionINT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionDOUBLE ::= varDOUBLE identificador IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+b;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varDOUBLE",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PTCOMA",String.valueOf(t3left),String.valueOf(t3right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDOUBLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionDOUBLE ::= varDOUBLE identificador PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varDOUBLE",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PTCOMA",String.valueOf(t2left),String.valueOf(t2right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDOUBLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionCHAR ::= varCHAR identificador IGUAL COMS identificador COMS PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+"\'"+b+"\'";
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    listaTokens(t1,"varCHAR",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMS",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMS",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PTCOMA",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionCHAR ::= varCHAR identificador IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+"\""+b+"\"";
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    listaTokens(t1,"varCHAR",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMD",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMD",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PTCOMA",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionCHAR ::= varCHAR identificador PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varCHAR",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PTCOMA",String.valueOf(t2left),String.valueOf(t2right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionBOOL ::= varBOOL identificador IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(b.equals("true")){
    RESULT="\n\t"+a+"= True";
    }else if(b.equals("false")){
    RESULT="\n\t"+a+"= False";
    }
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    listaTokens(t1,"varBOOL",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PTCOMA",String.valueOf(t3left),String.valueOf(t3right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionBOOL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionSTRING ::= varSTRING identificador IGUAL COMS CADENA COMS PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+"\'"+b+"\'";
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varSTRING",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMS",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMS",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PTCOMA",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRING",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionSTRING ::= varSTRING identificador IGUAL COMD CADENA COMD PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="\n\t"+a+"="+"\""+b+"\"";
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varSTRING",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"IGUAL",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMD",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMD",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PTCOMA",String.valueOf(t5left),String.valueOf(t5right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRING",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionSTRING ::= varSTRING identificador PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"varSTRING",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PTCOMA",String.valueOf(t2left),String.valueOf(t2right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRING",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionPRINT ::= wPrint PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+a+")";
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"PAR_DER",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"PTCOMA",String.valueOf(t4left),String.valueOf(t4right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionPRINT ::= wPrint PAR_IZQ COMS CADENA COMS MAS identificador PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\'"+a+"\'"+","+b+")";
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright)); 
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMS",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMS",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"MAS",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PAR_DER",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"PTCOMA",String.valueOf(t7left),String.valueOf(t7right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionPRINT ::= wPrint PAR_IZQ COMS CADENA DOSPT COMS MAS identificador PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\'"+a+"\'"+","+b+")"; 
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright)); 
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMS",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"DOSPT",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"COMS",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"MAS",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"PAR_DER",String.valueOf(t7left),String.valueOf(t7right));
    listaTokens(t8,"PTCOMA",String.valueOf(t8left),String.valueOf(t8right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionPRINT ::= wPrint PAR_IZQ COMS CADENA COMS PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\'"+a+"\')";
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMS",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMS",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PAR_DER",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PTCOMA",String.valueOf(t6left),String.valueOf(t6right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionPRINT ::= wPrint PAR_IZQ COMD CADENA COMD MAS identificador PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\""+a+"\""+","+b+")"; 
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright)); 
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMD",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMD",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"MAS",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PAR_DER",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"PTCOMA",String.valueOf(t7left),String.valueOf(t7right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionPRINT ::= wPrint PAR_IZQ COMD CADENA DOSPT COMD MAS identificador PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\""+a+"\""+","+b+")"; 
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright)); 
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMD",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"DOSPT",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"COMD",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"MAS",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"PAR_DER",String.valueOf(t7left),String.valueOf(t7right));
    listaTokens(t8,"PTCOMA",String.valueOf(t8left),String.valueOf(t8right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionPRINT ::= wPrint PAR_IZQ COMD CADENA COMD PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT="\n\t"+"print("+"\""+a+"\")"; 
    listaTokens(t1,"wPRINT",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_IZQ",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"COMD",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMD",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"PAR_DER",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"PTCOMA",String.valueOf(t6left),String.valueOf(t6right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= MENOS expresion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="-"+a;
    listaTokens(t1,"MENOS",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+"+"+b;
    listaTokens(t1,"MAS",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+"-"+b;
    listaTokens(t1,"MENOS",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+"*"+b;
    listaTokens(t1,"POR",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+"/"+b;
    listaTokens(t1,"DIV",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(a,"ENTERO",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(a,"DECIMAL",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(t1,"PAR_IZQ",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"PAR_DER",String.valueOf(t2left),String.valueOf(t2right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= DOLLAR LLI wNewValor COMA COMD CADENA COMD COMA COMD identificador COMD LLC 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t10left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t10right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t10 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=cf.buscarJSON(String.valueOf(a),String.valueOf(b));
    listaTokens(t1,"DOLLAR",String.valueOf(t1left),String.valueOf(t1right));
    listaTokens(t2,"LLI",String.valueOf(t2left),String.valueOf(t2right));
    listaTokens(t3,"wNewValor",String.valueOf(t3left),String.valueOf(t3right));
    listaTokens(t4,"COMA",String.valueOf(t4left),String.valueOf(t4right));
    listaTokens(t5,"COMD",String.valueOf(t5left),String.valueOf(t5right));
    listaTokens(t6,"COMD",String.valueOf(t6left),String.valueOf(t6right));
    listaTokens(t7,"COMA",String.valueOf(t7left),String.valueOf(t7right));
    listaTokens(t8,"COMD",String.valueOf(t8left),String.valueOf(t8right));
    listaTokens(t9,"COMD",String.valueOf(t9left),String.valueOf(t9right));
    listaTokens(t10,"LLC",String.valueOf(t10left),String.valueOf(t10right));
    listaTokens(b,"identificador",String.valueOf(bleft),String.valueOf(bright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CADENA ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CADENA ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a;
    listaTokens(a,"ENTERO",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CADENA ::= ENTERO CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+" "+b;
    listaTokens(a,"ENTERO",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CADENA ::= identificador CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+" "+b;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENA ::= identificador PT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+"."+b;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"PT",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONES ::= identificador RELACIONES CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+" "+b+" "+c;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICIONES ::= identificador RELACIONES CADENA AND CONDICIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+" "+b+" "+c+" and "+d;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"AND",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICIONES ::= identificador RELACIONES CADENA OR CONDICIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT=a+" "+b+" "+c+" or "+d;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"OR",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICIONES ::= NOT identificador 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="not "+a;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"NOT",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICIONES ::= NOT identificador RELACIONES CADENA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="not "+a+" "+b+" "+c;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(t1,"NOT",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICIONES ::= NOT identificador RELACIONES identificador CONDICIONES 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="not "+a+" "+b+" "+c+" "+d;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(c,"identificador",String.valueOf(cleft),String.valueOf(cright));
    listaTokens(t1,"NOT",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICIONES ::= NOT identificador RELACIONES ENTERO CONDICIONES 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT="not "+a+" "+b+" "+c+" "+d;
    listaTokens(a,"identificador",String.valueOf(aleft),String.valueOf(aright));
    listaTokens(c,"NOT",String.valueOf(cleft),String.valueOf(cright));
    listaTokens(t1,"NOT",String.valueOf(t1left),String.valueOf(t1right));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionFUNCIONES ::= wVoid wDefGlob PAR_IZQ PAR_DER LLI declaracionesG LLC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracionFUNCIONES ::= wVoid wGraphB PAR_IZQ PAR_DER LLI declaracionesGB LLC 
            {
              Object RESULT =null;
		
        cf.graficaBarras(tituloGB,tituloGBX,tituloGBY,ejeXGB,valoresGB);
        tituloGB="";tituloGBX="";tituloGBY="";ejeXGB=null;valoresGB=null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionFUNCIONES ::= wVoid wGraphP PAR_IZQ PAR_DER LLI declaracionesGP LLC 
            {
              Object RESULT =null;
		
        cf.graficoPie(tituloGP,valoresGP,ejeXGP);
        tituloGP="";valoresGP=null;ejeXGP=null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionFUNCIONES ::= wVoid identificador PAR_IZQ PAR_DER LLI declaraciones LLC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionesG ::= declaracionG declaracionesG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesG",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionesG ::= declaracionG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesG",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionG ::= declaracionINTG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionG ::= declaracionDOUBLEG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionG ::= declaracionCHARG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionG ::= declaracionBOOLG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionG ::= declaracionSTRINGG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionG",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionINTG ::= varINT identificador IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		guardarGlobales("int",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionINTG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionINTG ::= varINT identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionINTG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracionDOUBLEG ::= varDOUBLE identificador IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		guardarGlobales("double",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDOUBLEG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracionDOUBLEG ::= varDOUBLE identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDOUBLEG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionCHARG ::= varCHAR identificador IGUAL COMS identificador COMS PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		guardarGlobales("char",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHARG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracionCHARG ::= varCHAR identificador IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		guardarGlobales("char",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHARG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracionCHARG ::= varCHAR identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionCHARG",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracionBOOLG ::= varBOOL identificador IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(b.equals("true")){
                                                                                guardarGlobales("boolean",String.valueOf(a),"True");
    }else if(b.equals("false")){
                                                                                guardarGlobales("boolean",String.valueOf(a),"False");
    }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionBOOLG",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracionSTRINGG ::= varSTRING identificador IGUAL COMS CADENA COMS PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		guardarGlobales("string",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRINGG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracionSTRINGG ::= varSTRING identificador IGUAL COMD CADENA COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		guardarGlobales("string",String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRINGG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionSTRINGG ::= varSTRING identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSTRINGG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracionesGB ::= declaracionGB declaracionesGB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionesGB ::= declaracionGB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGB",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracionGB ::= decTituloGB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracionGB ::= decTituloGBX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracionGB ::= decTituloGBY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracionGB ::= decEjeX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracionGB ::= decValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracionesGP ::= declaracionGP declaracionesGP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracionesGP ::= declaracionGP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracionGP ::= decTituloGP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracionGP ::= decEjeXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracionGP ::= decValoresP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // decTituloGB ::= varSTRING wTITULO IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tituloGB=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGB",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // decTituloGB ::= varSTRING wTITULO IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tituloGB=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGB",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // decTituloGBX ::= varSTRING wTITULOX IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tituloGBX=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGBX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // decTituloGBX ::= varSTRING wTITULOX IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tituloGBX=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGBX",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // decTituloGBY ::= varSTRING wTITULOY IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tituloGBY=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGBY",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // decTituloGBY ::= varSTRING wTITULOY IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tituloGBY=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGBY",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // decEjeX ::= varSTRING CORI CORD wEJEX IGUAL LLI chainX LLC PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ejeXGB=String.valueOf(a).split(",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decEjeX",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // chainX ::= COMD CADENA COMD COMA chainX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chainX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // chainX ::= CADENA COMA chainX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=buscarGlobales((String) a)+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chainX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // chainX ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=buscarGlobales((String) a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chainX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // chainX ::= DOLLAR LLI wNewValor COMA COMD CADENA COMD COMA COMD identificador COMD LLC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=cf.buscarJSON(String.valueOf(a),String.valueOf(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chainX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // chainX ::= COMA chainX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chainX",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // decValores ::= varDOUBLE CORI CORD wVALORES IGUAL LLI chainX LLC PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		valoresGB=String.valueOf(a).split(",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decValores",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // decTituloGP ::= varSTRING wTITULO IGUAL identificador PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tituloGP=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGP",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // decTituloGP ::= varSTRING wTITULO IGUAL COMD identificador COMD PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tituloGP=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decTituloGP",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // decEjeXP ::= varSTRING CORI CORD wEJEX IGUAL LLI chainX LLC PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ejeXGP=String.valueOf(a).split(",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decEjeXP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // decValoresP ::= varDOUBLE CORI CORD wVALORES IGUAL LLI chainX LLC PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		valoresGP=String.valueOf(a).split(",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decValoresP",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

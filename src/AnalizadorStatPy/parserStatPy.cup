package AnalizadorStatPy;
import java_cup.runtime.*;
import statpyconverter.Config;

//PARSER 
parser code
{:  

    Config cf = new Config();

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

//TERMINALES
terminal String PTCOMA,PAR_IZQ,PAR_DER,COR_IZQ,COR_DER,COMS,COMD,DOSPT;
terminal String MAS,MENOS,POR,DIV;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;
terminal String identificador,varINT,varDOUBLE,varCHAR,varBOOL,varSTRING;
terminal String LLI,LLC,wVoid;
terminal String wMain,wPrint;
terminal String RELACIONES,IGUAL;
terminal String LOGICAS;

//NO_TERMINALES
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal expresion;
non terminal declaraciones;
non terminal declaracion;
non terminal declaracionINT;
non terminal declaracionDOUBLE;
non terminal declaracionCHAR;
non terminal declaracionBOOL;
non terminal declaracionSTRING;
non terminal declaracionPRINT;
non terminal main;
non terminal sentencia;
non terminal sentencias;
non terminal sentenciaIF;
non terminal sentenciaSWITCH;
non terminal CASE;
non terminal sentenciaCASE;
non terminal eleccion;

//PRECEDENCIA_DE_OPERADORES
precedence left MAS,MENOS;
precedence left POR,DIV;
precedence right UMENOS;

start with ini;

ini::=instrucciones;

instrucciones ::= instruccion instrucciones
 | instruccion
; 

instruccion ::= 
    main
;

main ::=
    wVoid wMain PAR_IZQ PAR_DER LLI eleccion:a LLC {: RESULT=a; cf.Escribir(String.valueOf(a));  :}
;

sentenciaIF ::=
    identificador:a PAR_IZQ identificador:b RELACIONES:c identificador:d PAR_DER LLI eleccion:e LLC{:if(a.equals("if")){
    RESULT = "if " + b + c + d + ":\n" + String.valueOf(e);
    }:}
    | identificador:a identificador:b PAR_IZQ identificador:c RELACIONES:d identificador:e PAR_DER LLI declaraciones:f LLC{:if(a.equals("else") && b.equals("if")){
    RESULT = "elif " + c + d + e + ":\n" + String.valueOf(f);
    }:} 
;

CASE ::=
    identificador:a expresion:b DOSPT declaraciones:c identificador:d PTCOMA{:
    if(a.equals("case")&&d.equals("break")){
        RESULT=b+":"+c;
    }
    :}
;

sentenciaCASE::=
    sentenciaCASE:a CASE:b          {: RESULT = "\t" +a + "\n\t" + String.valueOf(b); :}
    | CASE:a                        {: RESULT = "\n\t" +a; :}
;


sentenciaSWITCH ::=
    identificador:a PAR_IZQ identificador:b PAR_DER LLI sentenciaCASE:c LLC {:if(a.equals("switch")){
    RESULT ="def switcher(case,"+b+"):\n\tswitcher={"+c+"\n\t}" ;
    }:}
;


declaraciones ::= declaracion:a declaraciones:b {:RESULT="\n\t"+String.valueOf(a) +"\n\t"+ String.valueOf(b);:}
 | declaracion:a {:RESULT=String.valueOf(a);:}
; 

declaracion ::=
    declaracionINT:a            {:RESULT=a;:}
    | declaracionDOUBLE:a       {:RESULT=a;:}
    | declaracionCHAR:a         {:RESULT=a;:}
    | declaracionBOOL:a         {:RESULT=a;:}
    | declaracionSTRING:a       {:RESULT=a;:}
    | declaracionPRINT:a        {:RESULT=a;:}
;

sentencias ::= sentencia:a sentencias:b {:RESULT="\n\t"+String.valueOf(a) +"\n\t"+ String.valueOf(b);:}
 | sentencia:a {:RESULT=String.valueOf(a);:}
;

sentencia::=
    sentenciaIF:a               {:RESULT=a;:}
    | sentenciaSWITCH:a         {:RESULT=a;:}
;

eleccion::=
    declaraciones:a sentencias:b    {: RESULT = a + String.valueOf(b); :}
    | sentencias:a declaraciones:b  {: RESULT = a + String.valueOf(b); :}
    | declaraciones:a               {: RESULT = a; :}
    | sentencias:a                  {: RESULT = a; :}
;


declaracionINT ::=
    varINT identificador:a IGUAL expresion:b PTCOMA {:RESULT="\n\t"+a+"="+b;:}
    | varINT identificador:a PTCOMA {:RESULT="\n\t"+a;:}
;

declaracionDOUBLE ::=
    varDOUBLE identificador:a IGUAL expresion:b PTCOMA {:RESULT="\n\t"+a+"="+b;:}
    | varDOUBLE identificador:a PTCOMA {:RESULT="\n\t"+a;:}
;

declaracionCHAR ::=
    varCHAR identificador:a IGUAL COMS expresion:b COMS PTCOMA {:RESULT="\n\t"+a+"="+"\'"+b+"\'";:}
    | varCHAR identificador:a IGUAL COMD expresion:b COMD PTCOMA {:RESULT="\n\t"+a+"="+"\""+b+"\"";:}
    | varCHAR identificador:a PTCOMA {:RESULT="\n\t"+a;:}
;

declaracionBOOL ::=
    varBOOL identificador:a IGUAL identificador:b PTCOMA {:
    if(b.equals("true")){RESULT="\n\t"+a+"= True";
    }else if(b.equals("false")){RESULT="\n\t"+a+"= False";}
    :}
;


declaracionSTRING ::=
    varSTRING identificador:a IGUAL COMS expresion:b COMS PTCOMA {:RESULT="\n\t"+a+"="+"\'"+b+"\'";:}
    | varSTRING identificador:a IGUAL COMD expresion:b COMD PTCOMA {:RESULT="\n\t"+a+"="+"\""+b+"\"";:} 
    | varSTRING identificador:a PTCOMA {:RESULT=a;:}
;

declaracionPRINT ::=
    wPrint PAR_IZQ expresion:a PAR_DER PTCOMA {: RESULT="\n\t"+"print("+a+")"; :}
    | wPrint PAR_IZQ COMS expresion:a COMS MAS expresion:b PAR_DER PTCOMA {: RESULT="\n\t"+"print("+"\'"+a+"\'"+","+b+")"; :}
    | wPrint PAR_IZQ COMS expresion:a COMS PAR_DER PTCOMA {: RESULT="\n\t"+"print("+"\'"+a+"\')"; :}
    | wPrint PAR_IZQ COMD expresion:a COMD MAS expresion:b PAR_DER PTCOMA {: RESULT="\n\t"+"print("+"\""+a+"\""+","+b+")"; :}
    | wPrint PAR_IZQ COMD expresion:a COMD PAR_DER PTCOMA {: RESULT="\n\t"+"print("+"\""+a+"\")"; :}
;

expresion  ::= 
    MENOS expresion:a                      {:RESULT=(int)a*-1;:}%prec UMENOS  
 |  expresion:a MAS        expresion:b     {:RESULT=a+"+"+b;:}
 |  expresion:a MENOS      expresion:b     {:RESULT=a+"-"+b;:}
 |  expresion:a POR        expresion:b     {:RESULT=a+"*"+b;:}
 |  expresion:a DIV        expresion:b     {:RESULT=a+"/"+b;:}
 |  ENTERO:a                               {:RESULT=a;:}
 |  DECIMAL:a                              {:RESULT=a;:}
 |  PAR_IZQ expresion:a PAR_DER            {:RESULT=a;:} 
 |  identificador:a                        {:RESULT=a;:}
 |  identificador:a        expresion:b     {:RESULT=a+" "+b;:}
;
package AnalizadorStatPy;
import java_cup.runtime.*;
import statpyconverter.Config;

//PARSER 
parser code
{:  

    Config cf = new Config();

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

//TERMINALES
terminal String PTCOMA,PAR_IZQ,PAR_DER,COMS,COMD,DOSPT,LLI,LLC,DOLLAR,COMA,CORI,CORD,PT;
terminal String MAS,MENOS,POR,DIV,UMENOS;
terminal String ENTERO,DECIMAL;
terminal String varINT,varDOUBLE,varCHAR,varBOOL,varSTRING;
terminal String wVoid,wMain,wPrint,wIF,wELSE,wSWITCH,wCASE,wBREAK,wFOR,wWHILE,wDO;
terminal String wTITULO,wEJEX,wVALORES,wTITULOX,wTITULOY;
terminal String RELACIONES,IGUAL;
terminal String AND,OR,NOT;
terminal String identificador;

//NO_TERMINALES
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal expresion;
non terminal declaraciones;
non terminal declaracion;
non terminal declaracionINT;
non terminal declaracionDOUBLE;
non terminal declaracionCHAR;
non terminal declaracionBOOL;
non terminal declaracionSTRING;
non terminal declaracionPRINT;
non terminal main;
non terminal sentenciaIF;
non terminal sentenciaELSE;
non terminal sentenciaSWITCH;
non terminal sentenciaCASE;
non terminal sentenciaFOR;
non terminal sentenciaWHILE;
non terminal sentenciaDOWHILE;
non terminal CONDICIONES;
non terminal CASE;
non terminal CADENA;
non terminal CADENAR;
non terminal declaracionFUNCIONES;
non terminal datosFUNCIONES;

//PRECEDENCIA_DE_OPERADORES
precedence left MAS,MENOS;
precedence left POR,DIV;
precedence right UMENOS;
precedence left AND;
precedence left OR;
precedence right NOT;


start with ini;

ini::=instrucciones;

instrucciones ::= instruccion instrucciones
 | instruccion
; 

instruccion ::= 
    main
;

main ::=
    wVoid wMain PAR_IZQ PAR_DER LLI declaraciones:a LLC                         {:cf.Escribir(String.valueOf(a));  :}
;

declaraciones ::= declaracion:a declaraciones:b                                 {:RESULT="\n\t"+String.valueOf(a) +"\n\t"+ String.valueOf(b);:}
 | declaracion:a                                                                {:RESULT=String.valueOf(a);:}
; 

declaracion ::=
    declaracionINT:a                                                            {:RESULT=a;:}
    | declaracionDOUBLE:a                                                       {:RESULT=a;:}
    | declaracionCHAR:a                                                         {:RESULT=a;:}
    | declaracionBOOL:a                                                         {:RESULT=a;:}
    | declaracionSTRING:a                                                       {:RESULT=a;:}
    | declaracionPRINT:a                                                        {:RESULT=a;:}
    | sentenciaIF:a                                                             {:RESULT=a;:}
    | sentenciaELSE:a                                                           {:RESULT=a;:}
    | sentenciaSWITCH:a                                                         {:RESULT=a;:}
    | sentenciaFOR:a                                                            {:RESULT=a;:}
    | sentenciaWHILE:a                                                          {:RESULT=a;:}
    | sentenciaDOWHILE:a                                                        {:RESULT=a;:}
    | declaracionFUNCIONES                                                      {:RESULT="";:}
;

sentenciaIF ::=
    wIF PAR_IZQ CONDICIONES:a PAR_DER LLI declaraciones:b LLC 
    {:
    RESULT = "if " + a +":\n" + String.valueOf(b);
    :}
;

sentenciaELSE ::=
    wELSE sentenciaIF:a 
    {:
    RESULT = "el"+a;
    :}
;

sentenciaSWITCH ::=
    wSWITCH PAR_IZQ identificador:a PAR_DER LLI sentenciaCASE:b LLC             {:RESULT ="def switcher(case,"+a+"):\n\tswitcher={"+b+"\n\t}" ;:}
;

sentenciaCASE::=
    sentenciaCASE:a CASE:b                                                      {: RESULT = "\t" +a + "\n\t" + String.valueOf(b); :}
    | CASE:a                                                                    {: RESULT = "\n\t" +a; :}
;

CASE ::=
    wCASE CADENA:a DOSPT declaraciones:b wBREAK PTCOMA                          {:RESULT=a+":"+b;:}
;

sentenciaFOR::=
    wFOR PAR_IZQ declaracion:a identificador:b RELACIONES:c CADENA:d PTCOMA identificador:f MAS MAS PAR_DER LLI declaraciones:g LLC
    {:
    String[] dec = String.valueOf(a).split("=");  
                                                                                RESULT="for "+dec[0]+" in range("+dec[1]+","+d+"):"+g;
    :}
;

sentenciaWHILE::=
    wWHILE PAR_IZQ identificador:a RELACIONES:b CADENA:c PAR_DER LLI declaraciones:d LLC 
                                                                                {:RESULT = "while " + a+" "+b+" "+c+":\n" + String.valueOf(d);:}
;

sentenciaDOWHILE::=
    wDO LLI declaraciones:a LLC wWHILE PAR_IZQ identificador:b RELACIONES:c expresion:d PAR_DER PTCOMA
                                                                                {:RESULT="while True:"+a+"\n\t"+b+"="+b+"+1\n\tif("+b+c+d+"):\nbreak";:}
;

declaracionINT ::=
    varINT identificador:a IGUAL expresion:b PTCOMA                             {:RESULT="\n\t"+a+"="+b;:}
    | varINT identificador:a PTCOMA                                             {:RESULT="\n\t"+a;:}
;

declaracionDOUBLE ::=
    varDOUBLE identificador:a IGUAL expresion:b PTCOMA                          {:RESULT="\n\t"+a+"="+b;:}
    | varDOUBLE identificador:a IGUAL datosFUNCIONES:b PTCOMA                   {:RESULT="\n\t"+a+"="+b;:}
    | varDOUBLE CORI CORD identificador:a IGUAL datosFUNCIONES:b PTCOMA         {:RESULT="\n\t"+a+"="+b;:}
    | varDOUBLE identificador:a PTCOMA                                          {:RESULT="\n\t"+a;:}
;

declaracionCHAR ::=
    varCHAR identificador:a IGUAL COMS identificador:b COMS PTCOMA              {:RESULT="\n\t"+a+"="+"\'"+b+"\'";:}
    | varCHAR identificador:a IGUAL COMD identificador:b COMD PTCOMA            {:RESULT="\n\t"+a+"="+"\""+b+"\"";:}
    | varCHAR identificador:a PTCOMA {:RESULT="\n\t"+a;:}
;

declaracionBOOL ::=
    varBOOL identificador:a IGUAL identificador:b PTCOMA {:
    if(b.equals("true"))
                                                                                {RESULT="\n\t"+a+"= True";
    }else if(b.equals("false"))
                                                                                {RESULT="\n\t"+a+"= False";}
    :}
;

declaracionSTRING ::=
    varSTRING identificador:a IGUAL COMS CADENA:b COMS PTCOMA                   {:RESULT="\n\t"+a+"="+"\'"+b+"\'";:}
    | varSTRING identificador:a IGUAL datosFUNCIONES:b PTCOMA                   {:RESULT="\n\t"+a+"="+"\'"+b+"\'";:}
    | varSTRING identificador:a IGUAL COMD CADENA:b COMD PTCOMA                 {:RESULT="\n\t"+a+"="+"\""+b+"\"";:} 
    | varSTRING CORI CORD identificador:a IGUAL LLI CADENAR:b LLC PTCOMA        {:RESULT="\n\t"+a+"="+"\""+b+"\"";:} 
    | varSTRING identificador:a PTCOMA                                          {:RESULT=a;:}
;

declaracionPRINT ::=
    wPrint PAR_IZQ expresion:a PAR_DER PTCOMA                                       {: RESULT="\n\t"+"print("+a+")"; :}
    | wPrint PAR_IZQ COMS CADENA:a COMS MAS identificador:b PAR_DER PTCOMA          {: RESULT="\n\t"+"print("+"\'"+a+"\'"+","+b+")"; :}
    | wPrint PAR_IZQ COMS CADENA:a DOSPT COMS MAS identificador:b PAR_DER PTCOMA    {: RESULT="\n\t"+"print("+"\'"+a+"\'"+","+b+")"; :}
    | wPrint PAR_IZQ COMS CADENA:a COMS PAR_DER PTCOMA                              {: RESULT="\n\t"+"print("+"\'"+a+"\')"; :}
    | wPrint PAR_IZQ COMD CADENA:a COMD MAS identificador:b PAR_DER PTCOMA          {: RESULT="\n\t"+"print("+"\""+a+"\""+","+b+")"; :}
    | wPrint PAR_IZQ COMD CADENA:a DOSPT COMD MAS identificador:b PAR_DER PTCOMA    {: RESULT="\n\t"+"print("+"\""+a+"\""+","+b+")"; :}
    | wPrint PAR_IZQ COMD CADENA:a COMD PAR_DER PTCOMA                              {: RESULT="\n\t"+"print("+"\""+a+"\")"; :}
;

expresion  ::= 
    MENOS expresion:a                                                           {:RESULT="-"+a;:}%prec UMENOS  
 |  expresion:a MAS        expresion:b                                          {:RESULT=a+"+"+b;:}
 |  expresion:a MENOS      expresion:b                                          {:RESULT=a+"-"+b;:}
 |  expresion:a POR        expresion:b                                          {:RESULT=a+"*"+b;:}
 |  expresion:a DIV        expresion:b                                          {:RESULT=a+"/"+b;:}
 |  ENTERO:a                                                                    {:RESULT=a;:}
 |  DECIMAL:a                                                                   {:RESULT=a;:}
 |  PAR_IZQ expresion:a PAR_DER                                                 {:RESULT=a;:} 
;

CADENA ::=
    identificador:a                                                             {:RESULT=a;:}
    | ENTERO:a                                                                  {:RESULT=a;:}
    | ENTERO:a CADENA:b                                                         {:RESULT=a+" "+b;:}
    | identificador:a CADENA:b                                                  {:RESULT=a+" "+b;:}
    | identificador:a PT CADENA:b                                               {:RESULT=a+"."+b;:}
;

CADENAR ::=
    COMD CADENA:a COMD                                                          {:RESULT=a;:}
    | COMS CADENA:a COMS                                                        {:RESULT=a;:}
    | CADENA:a                                                                  {:RESULT=a;:}
    | COMD CADENA:a COMD COMA CADENA:b                                          {:RESULT=a+String.valueOf(b);:}
    | COMS CADENA:a COMS COMA CADENA:b                                          {:RESULT=a+String.valueOf(b);:}
    | CADENA:a COMA CADENA:b                                                    {:RESULT=a+String.valueOf(b);:}
;



CONDICIONES ::=
    identificador:a RELACIONES:b CADENA:c                                       {:RESULT=a+" "+b+" "+c;:}
    | identificador:a RELACIONES:b CADENA:c AND CONDICIONES:d                   {:RESULT=a+" "+b+" "+c+" and "+d;:}
    | identificador:a RELACIONES:b CADENA:c OR CONDICIONES:d                    {:RESULT=a+" "+b+" "+c+" or "+d;:}
    | NOT identificador:a                                                       {:RESULT="not "+a;:}
    | NOT identificador:a RELACIONES:b CADENA:c                                 {:RESULT="not "+a+" "+b+" "+c;:}
    | NOT identificador:a RELACIONES:b identificador:c CONDICIONES:d            {:RESULT="not "+a+" "+b+" "+c+" "+d;:}
    | NOT identificador:a RELACIONES:b ENTERO:c CONDICIONES:d                   {:RESULT="not "+a+" "+b+" "+c+" "+d;:}
;


//elementos-especificos-para-la-declaracion-de-funciones-------------------------------------------------------------------------------------------------------------------------


declaracionFUNCIONES::=
    wVoid identificador:a PAR_IZQ PAR_DER LLI declaraciones:b LLC {:System.out.println("funcion "+a+"\n"+b);:}
;

datosFUNCIONES::=
    DOLLAR LLI CADENA:a COMA COMD CADENA:b COMD COMA COMD CADENA:c COMD LLC     {:RESULT="Obtencion de simbolos -> NewValor: "+a+" - NombreArchivo: "+b+" - NombreSimbolo"+c;:}
    | DOLLAR LLI CADENA:a COMA COMS CADENA:b COMS COMA COMD CADENA:c COMD LLC   {:RESULT="Obtencion de simbolos -> NewValor: "+a+" - NombreArchivo: "+b+" - NombreSimbolo"+c;:}
;
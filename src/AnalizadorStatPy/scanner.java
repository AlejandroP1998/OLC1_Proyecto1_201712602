/* The following code was generated by JFlex 1.7.0 */

package AnalizadorStatPy;
import java_cup.runtime.Symbol;
import statpyconverter.Config;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/AnalizadorStatPy/scannerStatPy.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\61\1\66\1\60\1\60\22\0\1\57\1\24\1\10"+
    "\1\0\1\11\1\0\1\25\1\7\1\1\1\2\1\20\1\16\1\12"+
    "\1\17\1\13\1\21\12\56\1\4\1\3\1\22\1\23\1\22\2\0"+
    "\1\42\1\35\1\40\1\32\1\37\1\52\1\45\1\41\1\63\1\53"+
    "\1\65\1\36\1\47\1\30\1\33\2\62\1\43\1\64\1\31\1\34"+
    "\1\46\1\50\1\54\1\55\1\62\1\14\1\0\1\15\1\0\1\62"+
    "\1\0\1\42\1\35\1\40\1\32\1\37\1\52\1\45\1\41\1\63"+
    "\1\53\1\65\1\36\1\47\1\30\1\33\2\62\1\43\1\64\1\31"+
    "\1\34\1\46\1\50\1\54\1\55\1\62\1\5\1\26\1\6\7\0"+
    "\1\66\73\0\1\62\7\0\1\62\3\0\1\62\3\0\1\62\1\0"+
    "\1\62\6\0\1\62\1\0\1\62\4\0\1\62\7\0\1\62\3\0"+
    "\1\62\3\0\1\62\1\0\1\62\6\0\1\62\1\0\1\62\63\0"+
    "\2\27\115\0\1\44\u1ea8\0\1\66\1\66\u0100\0\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\3\1\6\26"+
    "\1\1\4\26\1\27\1\30\1\31\2\26\2\0\1\23"+
    "\1\32\1\33\1\0\1\34\1\0\1\26\1\35\7\26"+
    "\2\0\5\26\1\0\1\26\1\34\2\26\20\0\2\36"+
    "\4\0\4\36\1\0\5\36\1\37\1\0\4\26\1\0"+
    "\4\26\1\0\1\26\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\40\1\41\1\37\2\26\21\0\3\36\2\0"+
    "\7\36\1\0\2\26\1\42\1\26\2\43\1\44\1\0"+
    "\1\26\1\45\2\46\2\0\2\47\1\26\2\50\1\0"+
    "\3\26\1\51\16\0\1\36\1\0\1\36\3\0\1\36"+
    "\2\0\2\36\2\0\2\26\2\52\1\0\1\26\2\0"+
    "\1\26\2\53\2\26\12\0\1\36\1\0\1\36\2\0"+
    "\1\36\2\0\2\54\1\55\1\0\1\26\1\56\1\57"+
    "\1\26\1\56\1\57\11\0\1\36\2\0\1\36\1\0"+
    "\1\60\1\61\1\60\1\61\1\0\1\26\2\62\4\0"+
    "\2\36\4\0\1\36\4\0\1\36\4\0\1\36\4\0"+
    "\1\36\5\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\156\0\245\0\245\0\245\0\334\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\67\0\67\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\67\0\67\0\67\0\u04f1\0\67"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u0181\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u04ba\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\67\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u0181\0\u08cf\0\u0181\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u0181\0\u1c25\0\67\0\u0181\0\u0181\0\u1c5c\0\u1c93"+
    "\0\u0181\0\67\0\u0181\0\u1cca\0\u1d01\0\67\0\u0181\0\u1d38"+
    "\0\67\0\u0181\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u09ab\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\67\0\u0181\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\u2562\0\67\0\u0181\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u0181\0\u2a53\0\u2a8a\0\67\0\67"+
    "\0\u2ac1\0\u0181\0\u0181\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\67\0\67\0\u0181\0\u0181\0\u2dfa\0\u2e31\0\67"+
    "\0\u0181\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2"+
    "\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322"+
    "\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\32\1\35\1\32\1\36\1\37"+
    "\3\32\1\40\1\32\1\41\1\42\1\43\1\2\1\44"+
    "\3\32\1\45\2\46\1\47\1\32\1\50\1\51\1\32"+
    "\110\0\1\52\1\53\70\0\1\54\70\0\1\55\67\0"+
    "\1\56\70\0\1\57\21\0\1\60\44\0\14\32\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\30\0\1\61\14\32"+
    "\1\0\4\32\1\0\5\32\3\0\1\32\1\62\2\32"+
    "\31\0\3\32\1\63\10\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\31\0\3\32\1\64\7\32\1\65\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\31\0\6\32\1\66"+
    "\5\32\1\0\4\32\1\0\1\32\1\67\3\32\3\0"+
    "\4\32\31\0\3\32\1\70\5\32\1\71\1\72\1\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\32\0\1\73"+
    "\16\0\1\74\46\0\3\32\1\75\6\32\1\76\1\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\31\0\12\32"+
    "\1\77\1\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\31\0\11\32\1\100\2\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\31\0\3\32\1\101\10\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\14\0\1\102\14\0\14\32"+
    "\1\0\4\32\1\0\4\32\1\45\3\0\4\32\31\0"+
    "\1\103\13\32\1\0\4\32\1\0\1\104\4\32\3\0"+
    "\4\32\31\0\1\32\1\105\12\32\1\0\3\32\1\106"+
    "\1\0\5\32\3\0\4\32\2\0\21\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\114\1\107\1\115\3\107\1\116"+
    "\1\107\1\117\1\120\3\107\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\2\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\137\1\140\3\127\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\32\0\1\147\66\0\1\150"+
    "\65\0\1\32\1\151\12\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\31\0\4\32\1\152\7\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\31\0\3\32\1\153\10\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\31\0\7\32"+
    "\1\154\4\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\31\0\14\32\1\155\4\32\1\0\5\32\3\0\2\32"+
    "\1\156\1\32\31\0\7\32\1\157\4\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\31\0\1\160\13\32\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\31\0\12\32\1\161"+
    "\1\32\1\0\4\32\1\0\5\32\3\0\4\32\31\0"+
    "\14\32\1\162\4\32\1\0\5\32\3\0\2\32\1\163"+
    "\1\32\44\0\1\164\52\0\1\165\33\0\1\165\32\0"+
    "\1\166\14\32\1\0\4\32\1\0\5\32\3\0\1\32"+
    "\1\167\2\32\31\0\6\32\1\170\5\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\30\0\1\171\14\32\1\0"+
    "\4\32\1\0\5\32\3\0\1\32\1\172\2\32\30\0"+
    "\1\173\14\32\1\0\4\32\1\0\5\32\3\0\1\32"+
    "\1\174\2\32\31\0\13\32\1\175\1\0\4\32\1\0"+
    "\5\32\3\0\4\32\27\0\1\176\27\0\2\176\37\0"+
    "\1\32\1\177\12\32\1\0\4\32\1\0\5\32\3\0"+
    "\4\32\31\0\13\32\1\200\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\30\0\1\165\14\32\1\0\4\32\1\0"+
    "\5\32\3\0\1\32\1\201\2\32\2\0\17\107\1\202"+
    "\1\107\1\110\1\111\1\110\1\112\1\113\1\114\1\107"+
    "\1\115\3\107\1\116\1\107\1\117\1\120\3\107\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\2\0\17\107\1\202\1\107\3\110\1\112"+
    "\1\113\1\114\1\107\1\115\3\107\1\116\1\107\1\117"+
    "\1\120\3\107\1\121\1\107\1\122\1\123\1\124\1\0"+
    "\4\107\1\125\5\107\1\126\1\107\24\0\1\107\70\0"+
    "\1\107\67\0\1\107\70\0\1\203\21\0\1\107\15\0"+
    "\17\107\1\202\1\107\1\110\1\111\1\110\1\112\1\113"+
    "\1\204\1\107\1\115\3\107\1\116\1\107\1\117\1\120"+
    "\3\107\1\121\1\107\1\122\1\123\1\124\1\0\4\107"+
    "\1\125\5\107\1\126\1\107\2\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\2\107\1\205\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\2\0\17\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\114\1\107\1\115\3\107\1\116"+
    "\1\206\1\117\1\120\3\107\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\2\0"+
    "\17\107\1\202\1\107\1\110\1\111\1\110\1\112\1\113"+
    "\1\114\1\107\1\115\1\107\1\207\1\107\1\116\1\107"+
    "\1\117\1\120\1\107\1\206\1\107\1\121\1\107\1\122"+
    "\1\123\1\124\1\0\4\107\1\125\5\107\1\126\1\107"+
    "\32\0\1\210\16\0\1\211\17\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\1\107\1\212\1\107\1\116\1\107\1\117\1\120\1\107"+
    "\1\213\1\107\1\121\1\107\1\122\1\123\1\124\1\0"+
    "\4\107\1\125\5\107\1\126\1\107\2\0\17\107\1\202"+
    "\1\107\1\110\1\111\1\110\1\112\1\113\1\114\1\107"+
    "\1\115\3\107\1\116\1\107\1\117\1\120\1\107\1\214"+
    "\1\107\1\121\1\107\1\122\1\123\1\124\1\0\4\107"+
    "\1\125\5\107\1\126\1\107\2\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\1\215\2\107\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\2\0\12\107\1\216\4\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\124\1\0\4\107\1\125\5\107\1\126"+
    "\1\107\2\0\17\107\1\202\1\107\1\110\1\111\1\110"+
    "\1\112\1\113\1\114\1\107\1\217\3\107\1\116\1\107"+
    "\1\117\1\120\3\107\1\121\1\107\1\122\1\123\1\220"+
    "\1\0\4\107\1\125\5\107\1\126\1\107\2\0\21\127"+
    "\3\130\1\132\1\133\1\134\1\127\1\135\3\127\1\136"+
    "\1\127\1\137\1\140\3\127\1\141\1\127\1\142\1\143"+
    "\1\144\1\0\4\127\1\145\2\127\1\0\2\127\1\146"+
    "\1\127\24\0\1\127\70\0\1\127\67\0\1\127\70\0"+
    "\1\221\21\0\1\127\15\0\21\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\222\1\127\1\135\3\127\1\136\1\127"+
    "\1\137\1\140\3\127\1\141\1\127\1\142\1\143\1\144"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\2\0\21\127\1\130\1\131\1\130\1\132\1\133\1\134"+
    "\1\127\1\135\3\127\1\136\1\127\1\137\1\140\2\127"+
    "\1\223\1\141\1\127\1\142\1\143\1\144\1\0\4\127"+
    "\1\145\2\127\1\0\2\127\1\146\1\127\2\0\21\127"+
    "\1\130\1\131\1\130\1\132\1\133\1\134\1\127\1\135"+
    "\3\127\1\136\1\224\1\137\1\140\3\127\1\141\1\127"+
    "\1\142\1\143\1\144\1\0\4\127\1\145\2\127\1\0"+
    "\2\127\1\146\1\127\2\0\21\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\134\1\127\1\135\1\127\1\225\1\127"+
    "\1\136\1\127\1\137\1\140\1\127\1\224\1\127\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\32\0\1\226\16\0\1\227"+
    "\17\0\21\127\1\130\1\131\1\130\1\132\1\133\1\134"+
    "\1\127\1\135\1\127\1\230\1\127\1\136\1\127\1\137"+
    "\1\140\1\127\1\231\1\127\1\141\1\127\1\142\1\143"+
    "\1\144\1\0\4\127\1\145\2\127\1\0\2\127\1\146"+
    "\1\127\2\0\21\127\1\130\1\131\1\130\1\132\1\133"+
    "\1\134\1\127\1\135\3\127\1\136\1\127\1\137\1\140"+
    "\1\127\1\232\1\127\1\141\1\127\1\142\1\143\1\144"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\2\0\21\127\1\130\1\131\1\130\1\132\1\133\1\134"+
    "\1\127\1\135\3\127\1\136\1\127\1\137\1\140\1\233"+
    "\2\127\1\141\1\127\1\142\1\143\1\144\1\0\4\127"+
    "\1\145\2\127\1\0\2\127\1\146\1\127\2\0\12\127"+
    "\1\234\6\127\1\130\1\131\1\130\1\132\1\133\1\134"+
    "\1\127\1\135\3\127\1\136\1\127\1\137\1\140\3\127"+
    "\1\141\1\127\1\142\1\143\1\144\1\0\4\127\1\145"+
    "\2\127\1\0\2\127\1\146\1\127\2\0\21\127\1\130"+
    "\1\131\1\130\1\132\1\133\1\134\1\127\1\235\3\127"+
    "\1\136\1\127\1\137\1\140\3\127\1\141\1\127\1\142"+
    "\1\143\1\236\1\0\4\127\1\145\2\127\1\0\2\127"+
    "\1\146\1\127\35\0\1\237\62\0\4\32\1\240\7\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\31\0\5\32"+
    "\1\241\6\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\31\0\6\32\1\242\5\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\31\0\12\32\1\243\1\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\40\0\1\244\57\0\7\32"+
    "\1\245\4\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\31\0\14\32\1\0\4\32\1\0\2\32\1\246\2\32"+
    "\3\0\4\32\31\0\14\32\1\247\4\32\1\0\5\32"+
    "\3\0\2\32\1\250\1\32\31\0\13\32\1\251\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\40\0\1\252\57\0"+
    "\7\32\1\253\4\32\1\0\4\32\1\0\5\32\3\0"+
    "\4\32\30\0\1\254\33\0\1\254\34\0\1\255\67\0"+
    "\1\256\64\0\2\32\1\257\11\32\1\0\4\32\1\0"+
    "\5\32\3\0\4\32\31\0\3\32\1\260\10\32\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\31\0\1\261\66\0"+
    "\1\262\13\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\37\0\1\263\60\0\6\32\1\264\5\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\30\0\1\254\14\32\1\0"+
    "\4\32\1\0\5\32\3\0\1\32\1\265\2\32\31\0"+
    "\1\32\1\266\12\32\1\0\4\32\1\0\5\32\3\0"+
    "\4\32\2\0\17\107\1\202\1\267\1\110\1\111\1\110"+
    "\1\112\1\113\1\114\1\107\1\115\3\107\1\116\1\107"+
    "\1\117\1\120\3\107\1\121\1\107\1\122\1\123\1\124"+
    "\1\0\4\107\1\125\5\107\1\126\1\107\32\0\1\107"+
    "\65\0\1\203\1\270\20\0\1\107\15\0\17\107\1\202"+
    "\1\107\1\110\1\111\1\110\1\112\1\113\1\114\1\107"+
    "\1\115\3\107\1\116\1\107\1\271\1\120\3\107\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\2\0\17\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\114\1\107\1\115\3\107\1\116"+
    "\1\107\1\117\1\120\3\107\1\272\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\2\0"+
    "\17\107\1\202\1\107\1\110\1\111\1\110\1\112\1\113"+
    "\1\114\1\273\1\115\3\107\1\116\1\107\1\117\1\120"+
    "\3\107\1\121\1\107\1\122\1\123\1\124\1\0\4\107"+
    "\1\125\5\107\1\126\1\107\44\0\1\274\52\0\1\275"+
    "\33\0\1\275\4\0\17\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\276\1\107\1\115\3\107\1\116"+
    "\1\107\1\117\1\120\3\107\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\2\0"+
    "\17\107\1\202\1\107\1\110\1\111\1\110\1\112\1\113"+
    "\1\114\1\107\1\115\3\107\1\116\1\277\1\117\1\120"+
    "\3\107\1\121\1\107\1\122\1\123\1\124\1\0\4\107"+
    "\1\125\5\107\1\126\1\107\2\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\300\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\124\1\0\4\107\1\125\5\107\1\126"+
    "\1\107\2\0\17\107\1\202\1\107\1\110\1\111\1\110"+
    "\1\112\1\113\1\301\1\107\1\115\3\107\1\116\1\107"+
    "\1\117\1\120\3\107\1\121\1\107\1\122\1\123\1\124"+
    "\1\0\4\107\1\125\5\107\1\126\1\107\2\0\17\107"+
    "\1\202\1\107\1\110\1\111\1\110\1\112\1\216\1\114"+
    "\1\107\1\115\3\107\1\116\1\107\1\117\1\120\3\107"+
    "\1\121\1\107\1\122\1\123\1\124\1\0\4\107\1\302"+
    "\1\216\4\107\1\126\1\107\2\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\204\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\2\107\1\303\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\2\0\17\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\304\1\107\1\115\3\107\1\116"+
    "\1\107\1\117\1\120\1\215\2\107\1\121\1\107\1\122"+
    "\1\123\1\124\1\0\4\107\1\125\5\107\1\126\1\107"+
    "\32\0\1\127\65\0\1\221\1\305\20\0\1\127\15\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\306\1\140\3\127\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\2\0\21\127\1\130\1\131"+
    "\1\130\1\132\1\133\1\134\1\127\1\135\3\127\1\136"+
    "\1\127\1\137\1\140\3\127\1\307\1\127\1\142\1\143"+
    "\1\144\1\0\4\127\1\145\2\127\1\0\2\127\1\146"+
    "\1\127\2\0\21\127\1\130\1\131\1\130\1\132\1\133"+
    "\1\134\1\310\1\135\3\127\1\136\1\127\1\137\1\140"+
    "\3\127\1\141\1\127\1\142\1\143\1\144\1\0\4\127"+
    "\1\145\2\127\1\0\2\127\1\146\1\127\44\0\1\311"+
    "\52\0\1\312\33\0\1\312\4\0\21\127\1\130\1\131"+
    "\1\130\1\132\1\133\1\313\1\127\1\135\3\127\1\136"+
    "\1\127\1\137\1\140\3\127\1\141\1\127\1\142\1\143"+
    "\1\144\1\0\4\127\1\145\2\127\1\0\2\127\1\146"+
    "\1\127\2\0\21\127\1\130\1\131\1\130\1\132\1\133"+
    "\1\134\1\127\1\135\3\127\1\136\1\314\1\137\1\140"+
    "\3\127\1\141\1\127\1\142\1\143\1\144\1\0\4\127"+
    "\1\145\2\127\1\0\2\127\1\146\1\127\2\0\21\127"+
    "\1\130\1\131\1\130\1\132\1\133\1\315\1\127\1\135"+
    "\3\127\1\136\1\127\1\137\1\140\3\127\1\141\1\127"+
    "\1\142\1\143\1\144\1\0\4\127\1\145\2\127\1\0"+
    "\2\127\1\146\1\127\2\0\21\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\316\1\127\1\135\3\127\1\136\1\127"+
    "\1\137\1\140\3\127\1\141\1\127\1\142\1\143\1\144"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\2\0\21\127\1\130\1\131\1\130\1\132\1\234\1\134"+
    "\1\127\1\135\3\127\1\136\1\127\1\137\1\140\3\127"+
    "\1\141\1\127\1\142\1\143\1\144\1\0\4\127\1\317"+
    "\1\234\1\127\1\0\2\127\1\146\1\127\2\0\21\127"+
    "\1\130\1\131\1\130\1\132\1\133\1\222\1\127\1\135"+
    "\3\127\1\136\1\127\1\137\1\140\2\127\1\320\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\2\0\21\127\1\130\1\131"+
    "\1\130\1\132\1\133\1\321\1\127\1\135\3\127\1\136"+
    "\1\127\1\137\1\140\1\233\2\127\1\141\1\127\1\142"+
    "\1\143\1\144\1\0\4\127\1\145\2\127\1\0\2\127"+
    "\1\146\1\127\37\0\1\322\60\0\6\32\1\323\5\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\31\0\6\32"+
    "\1\324\5\32\1\0\4\32\1\0\5\32\3\0\4\32"+
    "\31\0\14\32\1\0\4\32\1\325\5\32\3\0\3\32"+
    "\1\326\34\0\1\327\63\0\3\32\1\330\10\32\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\31\0\1\331\76\0"+
    "\1\332\56\0\13\32\1\333\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\40\0\1\334\57\0\7\32\1\335\4\32"+
    "\1\0\4\32\1\0\5\32\3\0\4\32\31\0\1\336"+
    "\13\32\1\0\4\32\1\0\5\32\3\0\4\32\31\0"+
    "\10\32\1\337\3\32\1\0\4\32\1\0\5\32\3\0"+
    "\4\32\35\0\1\340\33\0\17\107\1\202\1\107\1\110"+
    "\1\111\1\110\1\112\1\113\1\114\1\107\1\115\3\107"+
    "\1\116\1\206\1\117\1\120\1\107\1\341\1\107\1\121"+
    "\1\107\1\122\1\123\1\124\1\0\4\107\1\125\5\107"+
    "\1\126\1\107\32\0\1\210\5\0\1\107\10\0\1\211"+
    "\17\0\17\107\1\202\1\107\1\110\1\111\1\110\1\112"+
    "\1\113\1\114\1\107\1\115\3\107\1\116\1\107\1\117"+
    "\1\120\3\107\1\342\1\107\1\122\1\123\1\124\1\0"+
    "\4\107\1\125\5\107\1\343\1\107\30\0\1\344\33\0"+
    "\1\344\34\0\1\345\65\0\1\203\1\0\1\107\17\0"+
    "\1\107\15\0\17\107\1\202\1\107\1\110\1\111\1\110"+
    "\1\112\1\113\1\114\1\107\1\115\1\107\1\346\1\107"+
    "\1\116\1\107\1\117\1\120\3\107\1\121\1\107\1\122"+
    "\1\123\1\124\1\0\4\107\1\125\5\107\1\126\1\107"+
    "\31\0\1\107\21\0\1\107\44\0\1\203\5\0\1\347"+
    "\13\0\1\107\15\0\12\107\1\216\4\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\216\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\124\1\0\4\107\1\302\1\216\4\107"+
    "\1\126\1\107\2\0\17\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\350\1\107\1\115\3\107\1\116"+
    "\1\107\1\117\1\120\3\107\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\31\0"+
    "\1\203\1\345\20\0\1\107\50\0\1\351\33\0\21\127"+
    "\1\130\1\131\1\130\1\132\1\133\1\134\1\127\1\135"+
    "\3\127\1\136\1\224\1\137\1\140\1\127\1\352\1\127"+
    "\1\141\1\127\1\142\1\143\1\144\1\0\4\127\1\145"+
    "\2\127\1\0\2\127\1\146\1\127\32\0\1\226\5\0"+
    "\1\127\10\0\1\227\17\0\21\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\134\1\127\1\135\3\127\1\136\1\127"+
    "\1\137\1\140\3\127\1\353\1\127\1\142\1\143\1\144"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\354\1\127"+
    "\30\0\1\355\33\0\1\355\34\0\1\356\65\0\1\221"+
    "\1\0\1\127\17\0\1\127\15\0\21\127\1\130\1\131"+
    "\1\130\1\132\1\133\1\134\1\127\1\135\1\127\1\357"+
    "\1\127\1\136\1\127\1\137\1\140\3\127\1\141\1\127"+
    "\1\142\1\143\1\144\1\0\4\127\1\145\2\127\1\0"+
    "\2\127\1\146\1\127\31\0\1\127\21\0\1\127\44\0"+
    "\1\221\5\0\1\360\13\0\1\127\15\0\12\127\1\234"+
    "\6\127\1\130\1\131\1\130\1\132\1\234\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\137\1\140\3\127\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\317\1\234"+
    "\1\127\1\0\2\127\1\146\1\127\2\0\21\127\1\130"+
    "\1\131\1\130\1\132\1\133\1\361\1\127\1\135\3\127"+
    "\1\136\1\127\1\137\1\140\3\127\1\141\1\127\1\142"+
    "\1\143\1\144\1\0\4\127\1\145\2\127\1\0\2\127"+
    "\1\146\1\127\31\0\1\221\1\356\20\0\1\127\47\0"+
    "\1\362\63\0\3\32\1\363\10\32\1\0\4\32\1\0"+
    "\5\32\3\0\4\32\31\0\7\32\1\364\4\32\1\0"+
    "\4\32\1\0\5\32\3\0\4\32\37\0\1\365\60\0"+
    "\6\32\1\366\5\32\1\0\4\32\1\0\5\32\3\0"+
    "\4\32\46\0\1\367\62\0\1\370\55\0\7\32\1\371"+
    "\4\32\1\0\4\32\1\0\5\32\3\0\4\32\31\0"+
    "\14\32\1\0\1\372\3\32\1\0\5\32\3\0\4\32"+
    "\31\0\11\32\1\373\2\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\37\0\1\374\31\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\124\5\107\1\125\5\107\1\126\1\107"+
    "\32\0\1\210\1\0\1\375\14\0\1\211\17\0\17\107"+
    "\1\202\1\107\1\110\1\111\1\110\1\112\1\113\1\114"+
    "\1\107\1\217\1\107\1\376\1\107\1\116\1\107\1\117"+
    "\1\120\3\107\1\121\1\107\1\122\1\123\1\220\1\0"+
    "\4\107\1\125\5\107\1\126\1\107\31\0\1\377\76\0"+
    "\1\u0100\27\0\17\107\1\202\1\107\1\110\1\111\1\110"+
    "\1\112\1\113\1\114\1\107\1\115\3\107\1\116\1\107"+
    "\1\117\1\120\2\107\1\u0101\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\40\0"+
    "\1\107\57\0\1\u0102\21\0\1\107\52\0\1\u0103\31\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\137\1\140\3\127\1\141"+
    "\1\127\1\142\1\143\1\144\5\127\1\145\2\127\1\0"+
    "\2\127\1\146\1\127\32\0\1\226\1\0\1\u0104\14\0"+
    "\1\227\17\0\21\127\1\130\1\131\1\130\1\132\1\133"+
    "\1\134\1\127\1\235\1\127\1\u0105\1\127\1\136\1\127"+
    "\1\137\1\140\3\127\1\141\1\127\1\142\1\143\1\236"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\31\0\1\u0106\76\0\1\u0107\27\0\21\127\1\130\1\131"+
    "\1\130\1\132\1\133\1\134\1\127\1\135\3\127\1\136"+
    "\1\127\1\137\1\140\2\127\1\u0108\1\141\1\127\1\142"+
    "\1\143\1\144\1\0\4\127\1\145\2\127\1\0\2\127"+
    "\1\146\1\127\40\0\1\127\57\0\1\u0109\21\0\1\127"+
    "\70\0\1\u010a\1\u010b\41\0\14\32\1\0\4\32\1\0"+
    "\2\32\1\u010c\1\u010d\1\32\3\0\4\32\40\0\1\u010e"+
    "\57\0\7\32\1\u010f\4\32\1\0\4\32\1\0\5\32"+
    "\3\0\4\32\31\0\14\32\1\u0110\4\32\1\0\5\32"+
    "\3\0\2\32\1\u0111\1\32\34\0\1\107\71\0\1\u0112"+
    "\31\0\17\107\1\202\1\107\1\110\1\111\1\110\1\112"+
    "\1\113\1\114\1\107\1\115\3\107\1\116\1\u0113\1\117"+
    "\1\120\3\107\1\121\1\107\1\122\1\123\1\124\1\0"+
    "\4\107\1\125\5\107\1\126\1\107\46\0\1\107\62\0"+
    "\1\107\26\0\17\107\1\202\1\107\1\110\1\111\1\110"+
    "\1\112\1\113\1\114\1\107\1\115\3\107\1\116\1\107"+
    "\1\u0114\1\120\3\107\1\121\1\107\1\122\1\123\1\124"+
    "\1\0\4\107\1\125\5\107\1\126\1\107\32\0\1\107"+
    "\13\0\1\107\54\0\1\127\71\0\1\u0115\31\0\21\127"+
    "\1\130\1\131\1\130\1\132\1\133\1\134\1\127\1\135"+
    "\3\127\1\136\1\u0116\1\137\1\140\3\127\1\141\1\127"+
    "\1\142\1\143\1\144\1\0\4\127\1\145\2\127\1\0"+
    "\2\127\1\146\1\127\46\0\1\127\62\0\1\127\26\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\u0117\1\140\3\127\1\141"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\32\0\1\127\13\0\1\127"+
    "\34\0\1\u0118\66\0\1\u0118\14\0\14\32\1\0\4\32"+
    "\1\0\5\32\3\0\4\32\40\0\1\u0119\30\0\17\107"+
    "\1\202\1\107\1\110\1\111\1\110\1\112\1\113\1\114"+
    "\1\107\1\115\3\107\1\116\1\107\1\u011a\1\120\3\107"+
    "\1\121\1\107\1\122\1\123\1\124\1\0\4\107\1\125"+
    "\5\107\1\126\1\107\2\0\17\107\1\202\1\107\1\110"+
    "\1\111\1\110\1\112\1\113\1\114\1\107\1\115\3\107"+
    "\1\116\1\206\1\117\1\120\3\107\1\126\1\107\1\122"+
    "\1\123\1\124\1\0\4\107\1\125\5\107\1\126\1\107"+
    "\40\0\1\u011b\30\0\21\127\1\130\1\131\1\130\1\132"+
    "\1\133\1\134\1\127\1\135\3\127\1\136\1\127\1\u011c"+
    "\1\140\3\127\1\141\1\127\1\142\1\143\1\144\1\0"+
    "\4\127\1\145\2\127\1\0\2\127\1\146\1\127\2\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\224\1\137\1\140\3\127\1\146"+
    "\1\127\1\142\1\143\1\144\1\0\4\127\1\145\2\127"+
    "\1\0\2\127\1\146\1\127\51\0\1\u011d\31\0\1\u011e"+
    "\54\0\12\107\1\u011f\4\107\1\202\1\107\1\110\1\111"+
    "\1\110\1\112\1\113\1\114\1\107\1\115\3\107\1\116"+
    "\1\206\1\117\1\120\3\107\1\121\1\107\1\122\1\123"+
    "\1\124\1\0\4\107\1\125\5\107\1\126\1\107\14\0"+
    "\1\u0120\54\0\12\127\1\u0121\6\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\134\1\127\1\135\3\127\1\136\1\224"+
    "\1\137\1\140\3\127\1\141\1\127\1\142\1\143\1\144"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\44\0\1\u0122\73\0\1\u0123\17\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\114\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\u0124\1\0\4\107\1\125\5\107\1\126"+
    "\1\107\51\0\1\u0125\17\0\21\127\1\130\1\131\1\130"+
    "\1\132\1\133\1\134\1\127\1\135\3\127\1\136\1\127"+
    "\1\137\1\140\3\127\1\141\1\127\1\142\1\143\1\u0126"+
    "\1\0\4\127\1\145\2\127\1\0\2\127\1\146\1\127"+
    "\30\0\1\u0127\33\0\1\u0127\46\0\1\u0128\24\0\17\107"+
    "\1\202\1\107\1\110\1\111\1\110\1\112\1\113\1\114"+
    "\1\107\1\115\3\107\1\116\1\107\1\117\1\120\1\215"+
    "\1\107\1\u0129\1\121\1\107\1\122\1\123\1\124\1\0"+
    "\4\107\1\125\5\107\1\126\1\107\44\0\1\u012a\24\0"+
    "\21\127\1\130\1\131\1\130\1\132\1\133\1\134\1\127"+
    "\1\135\3\127\1\136\1\127\1\137\1\140\1\233\1\127"+
    "\1\u012b\1\141\1\127\1\142\1\143\1\144\1\0\4\127"+
    "\1\145\2\127\1\0\2\127\1\146\1\127\32\0\1\u012c"+
    "\64\0\1\u012d\33\0\1\u012d\4\0\17\107\1\202\1\107"+
    "\1\110\1\111\1\110\1\112\1\113\1\u012e\1\107\1\115"+
    "\3\107\1\116\1\107\1\117\1\120\3\107\1\121\1\107"+
    "\1\122\1\123\1\124\1\0\4\107\1\125\5\107\1\126"+
    "\1\107\30\0\1\u012f\33\0\1\u012f\4\0\21\127\1\130"+
    "\1\131\1\130\1\132\1\133\1\u0130\1\127\1\135\3\127"+
    "\1\136\1\127\1\137\1\140\3\127\1\141\1\127\1\142"+
    "\1\143\1\144\1\0\4\127\1\145\2\127\1\0\2\127"+
    "\1\146\1\127\40\0\1\u0131\60\0\1\347\65\0\1\203"+
    "\1\347\20\0\1\107\45\0\1\360\65\0\1\221\1\360"+
    "\20\0\1\127\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13585];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\21\11\23\1\2\11\2\1\2\0\3\11\1\0"+
    "\1\11\1\0\11\1\2\0\5\1\1\0\4\1\20\0"+
    "\2\1\4\0\4\1\1\0\5\1\1\11\1\0\4\1"+
    "\1\0\4\1\1\0\1\1\3\0\2\1\1\0\1\1"+
    "\1\0\6\1\21\0\3\1\2\0\7\1\1\0\4\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\1\2\0\1\11"+
    "\2\1\1\11\1\1\1\0\4\1\16\0\1\1\1\0"+
    "\1\1\3\0\1\1\2\0\2\1\2\0\2\1\1\11"+
    "\1\1\1\0\1\1\2\0\1\1\1\11\3\1\12\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\3\1\1\0"+
    "\1\1\2\11\3\1\11\0\1\1\2\0\1\1\1\0"+
    "\2\11\2\1\1\0\1\1\1\11\1\1\4\0\2\1"+
    "\4\0\1\1\4\0\1\1\4\0\1\1\4\0\1\1"+
    "\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    Config cf = new Config();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 290) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline)+" y columna: "+(yycolumn);
        System.out.println(errLex);
            } 
            // fall through
          case 52: break;
          case 2: 
            { return new Symbol(sym.PAR_IZQ,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 53: break;
          case 3: 
            { return new Symbol(sym.PAR_DER,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 54: break;
          case 4: 
            { return new Symbol(sym.PTCOMA,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 55: break;
          case 5: 
            { return new Symbol(sym.DOSPT,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 56: break;
          case 6: 
            { return new Symbol(sym.LLI,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 57: break;
          case 7: 
            { return new Symbol(sym.LLC,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 58: break;
          case 8: 
            { return new Symbol(sym.COMS,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 59: break;
          case 9: 
            { return new Symbol(sym.COMD,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 60: break;
          case 10: 
            { return new Symbol(sym.DOLLAR,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 61: break;
          case 11: 
            { return new Symbol(sym.COMA,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 62: break;
          case 12: 
            { return new Symbol(sym.PT,               yyline, yycolumn,yytext());
            } 
            // fall through
          case 63: break;
          case 13: 
            { return new Symbol(sym.CORI,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 64: break;
          case 14: 
            { return new Symbol(sym.CORD,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 65: break;
          case 15: 
            { return new Symbol(sym.MAS,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 66: break;
          case 16: 
            { return new Symbol(sym.MENOS,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 67: break;
          case 17: 
            { return new Symbol(sym.POR,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 68: break;
          case 18: 
            { return new Symbol(sym.DIV,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 69: break;
          case 19: 
            { return new Symbol(sym.RELACIONES,       yyline, yycolumn,yytext());
            } 
            // fall through
          case 70: break;
          case 20: 
            { return new Symbol(sym.IGUAL,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 71: break;
          case 21: 
            { return new Symbol(sym.NOT,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 72: break;
          case 22: 
            { return new Symbol(sym.identificador,    yyline, yycolumn,yytext());
            } 
            // fall through
          case 73: break;
          case 23: 
            { return new Symbol(sym.ENTERO,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 74: break;
          case 24: 
            { /*Espacios en blanco, ignorados*/
            } 
            // fall through
          case 75: break;
          case 25: 
            { /*Saltos de linea, ignorados*/
            } 
            // fall through
          case 76: break;
          case 26: 
            { return new Symbol(sym.AND,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 77: break;
          case 27: 
            { return new Symbol(sym.OR,               yyline, yycolumn,yytext());
            } 
            // fall through
          case 78: break;
          case 28: 
            { return new Symbol(sym.wIF,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 79: break;
          case 29: 
            { return new Symbol(sym.wDO,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 80: break;
          case 30: 
            { /*Comentario una linea, ignorados*/
            } 
            // fall through
          case 81: break;
          case 31: 
            { return new Symbol(sym.varINT,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 32: 
            { return new Symbol(sym.wFOR,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 83: break;
          case 33: 
            { return new Symbol(sym.DECIMAL,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 84: break;
          case 34: 
            { return new Symbol(sym.varBOOL,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 35: 
            { return new Symbol(sym.wELSE,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 86: break;
          case 36: 
            { return new Symbol(sym.wEJEX,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 87: break;
          case 37: 
            { return new Symbol(sym.varCHAR,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 88: break;
          case 38: 
            { return new Symbol(sym.wCASE,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 89: break;
          case 39: 
            { return new Symbol(sym.wVoid,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 40: 
            { return new Symbol(sym.wMain,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 91: break;
          case 41: 
            { /*Comentario multilinea, ignorados*/
            } 
            // fall through
          case 92: break;
          case 42: 
            { return new Symbol(sym.wBREAK,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 43: 
            { return new Symbol(sym.wWHILE,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 94: break;
          case 44: 
            { return new Symbol(sym.wTITULO,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 95: break;
          case 45: 
            { return new Symbol(sym.varDOUBLE,        yyline, yycolumn,yytext());
            } 
            // fall through
          case 96: break;
          case 46: 
            { return new Symbol(sym.varSTRING,        yyline, yycolumn,yytext());
            } 
            // fall through
          case 97: break;
          case 47: 
            { return new Symbol(sym.wSWITCH,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 98: break;
          case 48: 
            { return new Symbol(sym.wTITULOX,         yyline, yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 49: 
            { return new Symbol(sym.wTITULOY,         yyline, yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 50: 
            { return new Symbol(sym.wVALORES,         yyline, yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 51: 
            { return new Symbol(sym.wPrint,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

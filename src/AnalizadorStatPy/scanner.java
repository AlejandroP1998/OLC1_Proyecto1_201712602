/* The following code was generated by JFlex 1.7.0 */

package AnalizadorStatPy;
import java_cup.runtime.Symbol;
import statpyconverter.Config;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/AnalizadorStatPy/scannerStatPy.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\53\1\57\1\52\1\52\22\0\1\51\1\21\1\12"+
    "\3\0\1\22\1\11\1\1\1\2\1\15\1\13\1\0\1\14\1\45"+
    "\1\16\12\50\1\6\1\5\1\17\1\20\1\17\2\0\1\37\1\32"+
    "\1\35\1\27\1\34\1\54\1\42\1\36\1\55\1\54\1\54\1\33"+
    "\1\44\1\25\1\30\2\54\1\40\1\56\1\26\1\31\1\43\1\46"+
    "\3\54\1\3\1\0\1\4\1\0\1\54\1\0\1\37\1\32\1\35"+
    "\1\27\1\34\1\54\1\42\1\36\1\55\1\54\1\54\1\33\1\44"+
    "\1\25\1\30\2\54\1\40\1\56\1\26\1\31\1\43\1\46\3\54"+
    "\1\7\1\23\1\10\7\0\1\57\73\0\1\54\7\0\1\54\3\0"+
    "\1\54\3\0\1\54\1\0\1\54\6\0\1\54\1\0\1\54\4\0"+
    "\1\54\7\0\1\54\3\0\1\54\3\0\1\54\1\0\1\54\6\0"+
    "\1\54\1\0\1\54\63\0\2\24\115\0\1\41\u1ea8\0\1\57\1\57"+
    "\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\3\1\4\23\1\1\2\23\1\24"+
    "\1\25\1\26\2\23\2\0\1\20\1\22\1\0\6\23"+
    "\1\0\2\23\1\0\2\23\15\0\2\27\4\0\2\27"+
    "\1\0\4\27\1\30\5\23\3\0\1\23\1\0\1\23"+
    "\1\31\1\30\1\23\13\0\3\27\1\0\2\27\1\0"+
    "\1\27\1\23\1\32\1\23\1\0\1\23\1\33\1\34"+
    "\1\0\2\35\2\36\1\23\1\37\10\0\2\27\4\0"+
    "\2\27\1\23\1\40\1\0\1\23\1\0\1\23\6\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\1\41\1\0"+
    "\1\23\2\42\5\0\1\27\3\0\1\23\3\0\1\27"+
    "\4\0\1\27\14\0\1\43\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\140"+
    "\0\220\0\220\0\220\0\300\0\360\0\u0120\0\u0150\0\u0180"+
    "\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\60\0\60"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\60\0\60\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0360\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\60\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0570\0\u0150\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u0150\0\u10b0\0\u10e0\0\u1110\0\u0150\0\60\0\u1140\0\60"+
    "\0\u0150\0\60\0\u0150\0\u1170\0\u0600\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\60\0\u14d0"+
    "\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u0150"+
    "\0\u17d0\0\u1800\0\60\0\u0150\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0"+
    "\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40"+
    "\0\u1d70\0\u1da0\0\u1dd0\0\60\0\u1e00\0\u1e30";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\27\1\30\2\27"+
    "\1\31\2\27\1\32\3\27\1\33\1\27\1\34\1\35"+
    "\1\2\1\27\1\2\1\36\2\37\1\40\1\27\1\41"+
    "\1\42\76\0\1\43\1\44\61\0\1\45\61\0\1\46"+
    "\60\0\1\46\61\0\1\47\57\0\14\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\3\0\3\27\26\0\3\27"+
    "\1\50\10\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\3\27\26\0\3\27\1\51\7\27\1\52\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\3\0\3\27\26\0"+
    "\3\27\1\53\5\27\1\54\1\55\1\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\3\0\3\27\27\0\1\56"+
    "\56\0\3\27\1\57\10\27\1\0\3\27\1\0\1\27"+
    "\1\0\1\27\3\0\3\27\26\0\12\27\1\60\1\27"+
    "\1\0\3\27\1\0\1\27\1\0\1\27\3\0\3\27"+
    "\26\0\14\27\1\0\3\27\1\61\1\27\1\0\1\36"+
    "\3\0\3\27\26\0\1\62\13\27\1\0\3\27\1\0"+
    "\1\27\1\0\1\27\3\0\3\27\26\0\1\27\1\63"+
    "\12\27\1\0\3\27\1\0\1\27\1\0\1\27\3\0"+
    "\3\27\2\0\16\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\2\64\1\73\3\64\1\74\1\64"+
    "\1\75\1\76\1\0\1\64\1\0\1\77\5\64\1\100"+
    "\2\0\16\101\1\102\1\103\1\102\1\104\1\105\1\106"+
    "\5\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\0\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\115\27\0\1\116\56\0\4\27\1\117\7\27\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\3\0\3\27\26\0"+
    "\3\27\1\120\10\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\3\0\3\27\26\0\7\27\1\121\4\27\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\3\0\3\27\26\0"+
    "\1\122\13\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\3\27\26\0\12\27\1\123\1\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\3\0\3\27\26\0\14\27"+
    "\1\124\3\27\1\0\1\27\1\0\1\27\3\0\3\27"+
    "\41\0\1\125\43\0\1\126\14\27\1\0\3\27\1\0"+
    "\1\27\1\0\1\27\3\0\1\27\1\127\1\27\25\0"+
    "\1\130\14\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\1\27\1\131\1\27\24\0\1\132\24\0\2\132"+
    "\33\0\1\27\1\133\12\27\1\0\3\27\1\0\1\27"+
    "\1\0\1\27\3\0\3\27\26\0\13\27\1\134\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\3\0\3\27\2\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\2\64\1\73\3\64\1\74\1\64"+
    "\1\75\1\76\1\0\1\64\1\0\1\77\5\64\1\100"+
    "\2\0\14\64\1\135\1\64\3\65\1\67\1\70\1\71"+
    "\5\64\1\72\2\64\1\73\3\64\1\74\1\64\1\75"+
    "\1\76\1\0\1\64\1\0\1\77\5\64\1\100\21\0"+
    "\1\64\61\0\1\64\60\0\1\64\61\0\1\136\33\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\2\64\1\73\2\64\1\137\1\74"+
    "\1\64\1\75\1\76\1\0\1\64\1\0\1\77\5\64"+
    "\1\100\2\0\14\64\1\135\1\64\1\65\1\66\1\65"+
    "\1\67\1\70\1\71\3\64\1\140\1\64\1\72\2\64"+
    "\1\73\1\64\1\141\1\64\1\74\1\64\1\75\1\76"+
    "\1\0\1\64\1\0\1\77\5\64\1\100\27\0\1\142"+
    "\32\0\14\64\1\135\1\64\1\65\1\66\1\65\1\67"+
    "\1\70\1\71\3\64\1\143\1\64\1\72\2\64\1\73"+
    "\3\64\1\74\1\64\1\75\1\76\1\0\1\64\1\0"+
    "\1\77\5\64\1\100\2\0\14\64\1\135\1\64\1\65"+
    "\1\66\1\65\1\67\1\70\1\71\5\64\1\72\2\64"+
    "\1\73\1\64\1\144\1\64\1\74\1\64\1\75\1\76"+
    "\1\0\1\64\1\0\1\77\5\64\1\100\2\0\14\64"+
    "\1\135\1\64\1\65\1\66\1\65\1\67\1\70\1\71"+
    "\5\64\1\72\2\64\1\73\3\64\1\74\1\64\1\75"+
    "\1\76\1\145\1\64\1\0\1\77\5\64\1\100\2\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\1\64\1\146\3\64\1\72\2\64\1\73\3\64"+
    "\1\74\1\64\1\75\1\76\1\0\1\64\1\0\1\77"+
    "\5\64\1\100\2\0\16\101\3\102\1\104\1\105\1\106"+
    "\5\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\0\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\115\21\0\1\101\61\0\1\101\60\0\1\101\61\0"+
    "\1\147\33\0\16\101\1\102\1\103\1\102\1\104\1\105"+
    "\1\106\5\101\1\107\2\101\1\110\2\101\1\150\1\111"+
    "\1\101\1\112\1\113\1\0\1\101\1\0\1\114\2\101"+
    "\1\0\2\101\1\115\2\0\16\101\1\102\1\103\1\102"+
    "\1\104\1\105\1\106\3\101\1\151\1\101\1\107\2\101"+
    "\1\110\1\101\1\152\1\101\1\111\1\101\1\112\1\113"+
    "\1\0\1\101\1\0\1\114\2\101\1\0\2\101\1\115"+
    "\27\0\1\153\32\0\16\101\1\102\1\103\1\102\1\104"+
    "\1\105\1\106\3\101\1\154\1\101\1\107\2\101\1\110"+
    "\3\101\1\111\1\101\1\112\1\113\1\0\1\101\1\0"+
    "\1\114\2\101\1\0\2\101\1\115\2\0\16\101\1\102"+
    "\1\103\1\102\1\104\1\105\1\106\5\101\1\107\2\101"+
    "\1\110\1\101\1\155\1\101\1\111\1\101\1\112\1\113"+
    "\1\0\1\101\1\0\1\114\2\101\1\0\2\101\1\115"+
    "\2\0\16\101\1\102\1\103\1\102\1\104\1\105\1\106"+
    "\5\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\156\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\115\2\0\16\101\1\102\1\103\1\102\1\104\1\105"+
    "\1\106\1\101\1\157\3\101\1\107\2\101\1\110\3\101"+
    "\1\111\1\101\1\112\1\113\1\0\1\101\1\0\1\114"+
    "\2\101\1\0\2\101\1\115\26\0\5\27\1\160\6\27"+
    "\1\0\3\27\1\0\1\27\1\0\1\27\3\0\3\27"+
    "\26\0\6\27\1\161\5\27\1\0\3\27\1\0\1\27"+
    "\1\0\1\27\3\0\3\27\26\0\12\27\1\162\1\27"+
    "\1\0\3\27\1\0\1\27\1\0\1\27\3\0\3\27"+
    "\26\0\14\27\1\163\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\2\27\1\164\26\0\13\27\1\165\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\3\0\3\27\35\0\1\166"+
    "\47\0\1\167\30\0\1\167\31\0\1\170\55\0\2\27"+
    "\1\171\11\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\3\27\26\0\1\172\57\0\1\173\13\27\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\3\0\3\27\25\0"+
    "\1\167\14\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\3\0\1\27\1\174\1\27\2\0\14\64\1\135\1\175"+
    "\1\65\1\66\1\65\1\67\1\70\1\71\5\64\1\72"+
    "\2\64\1\73\3\64\1\74\1\64\1\75\1\76\1\0"+
    "\1\64\1\0\1\77\5\64\1\100\27\0\1\64\32\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\1\64\1\176\1\73\3\64\1\74"+
    "\1\64\1\75\1\76\1\0\1\64\1\0\1\77\5\64"+
    "\1\100\2\0\14\64\1\135\1\64\1\65\1\66\1\65"+
    "\1\67\1\70\1\71\1\177\4\64\1\72\2\64\1\73"+
    "\3\64\1\74\1\64\1\75\1\76\1\0\1\64\1\0"+
    "\1\77\5\64\1\100\2\0\14\64\1\135\1\64\1\65"+
    "\1\66\1\65\1\67\1\70\1\71\5\64\1\72\2\64"+
    "\1\73\3\64\1\200\1\64\1\75\1\76\1\0\1\64"+
    "\1\0\1\77\5\64\1\100\41\0\1\201\20\0\14\64"+
    "\1\135\1\64\1\65\1\66\1\65\1\67\1\70\1\202"+
    "\5\64\1\72\2\64\1\73\3\64\1\74\1\64\1\75"+
    "\1\76\1\0\1\64\1\0\1\77\5\64\1\100\2\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\203\5\64\1\72\2\64\1\73\3\64\1\74\1\64"+
    "\1\75\1\76\1\0\1\64\1\0\1\77\5\64\1\100"+
    "\24\0\1\204\24\0\2\204\7\0\14\64\1\135\1\64"+
    "\1\65\1\66\1\65\1\67\1\70\1\71\5\64\1\72"+
    "\2\64\1\73\2\64\1\205\1\74\1\64\1\75\1\76"+
    "\1\0\1\64\1\0\1\77\5\64\1\100\27\0\1\101"+
    "\32\0\16\101\1\102\1\103\1\102\1\104\1\105\1\106"+
    "\5\101\1\107\1\101\1\206\1\110\3\101\1\111\1\101"+
    "\1\112\1\113\1\0\1\101\1\0\1\114\2\101\1\0"+
    "\2\101\1\115\2\0\16\101\1\102\1\103\1\102\1\104"+
    "\1\105\1\106\1\207\4\101\1\107\2\101\1\110\3\101"+
    "\1\111\1\101\1\112\1\113\1\0\1\101\1\0\1\114"+
    "\2\101\1\0\2\101\1\115\2\0\16\101\1\102\1\103"+
    "\1\102\1\104\1\105\1\106\5\101\1\107\2\101\1\110"+
    "\3\101\1\210\1\101\1\112\1\113\1\0\1\101\1\0"+
    "\1\114\2\101\1\0\2\101\1\115\41\0\1\211\20\0"+
    "\16\101\1\102\1\103\1\102\1\104\1\105\1\212\5\101"+
    "\1\107\2\101\1\110\3\101\1\111\1\101\1\112\1\113"+
    "\1\0\1\101\1\0\1\114\2\101\1\0\2\101\1\115"+
    "\2\0\16\101\1\102\1\103\1\102\1\104\1\105\1\213"+
    "\5\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\0\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\115\24\0\1\214\24\0\2\214\7\0\16\101\1\102"+
    "\1\103\1\102\1\104\1\105\1\106\5\101\1\107\2\101"+
    "\1\110\2\101\1\215\1\111\1\101\1\112\1\113\1\0"+
    "\1\101\1\0\1\114\2\101\1\0\2\101\1\115\26\0"+
    "\6\27\1\216\5\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\3\0\3\27\26\0\14\27\1\0\3\27\1\0"+
    "\1\27\1\217\1\27\3\0\3\27\31\0\1\220\54\0"+
    "\3\27\1\221\10\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\3\0\3\27\26\0\1\222\57\0\1\223\13\27"+
    "\1\0\3\27\1\0\1\27\1\0\1\27\3\0\3\27"+
    "\2\0\14\64\1\135\1\64\1\65\1\66\1\65\1\67"+
    "\1\70\1\71\5\64\1\72\2\64\1\73\1\64\1\224"+
    "\1\64\1\74\1\64\1\75\1\76\1\0\1\64\1\0"+
    "\1\77\5\64\1\100\2\0\14\64\1\135\1\64\1\65"+
    "\1\66\1\65\1\67\1\70\1\71\5\64\1\72\2\64"+
    "\1\73\3\64\1\225\1\64\1\75\1\76\1\0\1\64"+
    "\1\0\1\77\5\64\1\226\27\0\1\142\5\0\1\64"+
    "\47\0\1\227\30\0\1\227\27\0\1\136\1\0\1\64"+
    "\55\0\1\64\33\0\14\64\1\135\1\64\1\65\1\66"+
    "\1\65\1\67\1\204\1\71\5\64\1\72\2\64\1\73"+
    "\3\64\1\74\1\64\1\75\1\76\1\0\1\64\1\0"+
    "\1\230\1\204\4\64\1\100\2\0\14\64\1\135\1\64"+
    "\1\65\1\66\1\65\1\67\1\70\1\231\5\64\1\72"+
    "\2\64\1\73\3\64\1\74\1\64\1\75\1\76\1\0"+
    "\1\64\1\0\1\77\5\64\1\100\2\0\16\101\1\102"+
    "\1\103\1\102\1\104\1\105\1\106\5\101\1\107\2\101"+
    "\1\110\1\101\1\232\1\101\1\111\1\101\1\112\1\113"+
    "\1\0\1\101\1\0\1\114\2\101\1\0\2\101\1\115"+
    "\2\0\16\101\1\102\1\103\1\102\1\104\1\105\1\106"+
    "\5\101\1\107\2\101\1\110\3\101\1\233\1\101\1\112"+
    "\1\113\1\0\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\234\27\0\1\153\5\0\1\101\47\0\1\235\30\0"+
    "\1\235\27\0\1\147\1\0\1\101\55\0\1\101\33\0"+
    "\16\101\1\102\1\103\1\102\1\104\1\214\1\106\5\101"+
    "\1\107\2\101\1\110\3\101\1\111\1\101\1\112\1\113"+
    "\1\0\1\101\1\0\1\236\1\214\1\101\1\0\2\101"+
    "\1\115\2\0\16\101\1\102\1\103\1\102\1\104\1\105"+
    "\1\237\5\101\1\107\2\101\1\110\3\101\1\111\1\101"+
    "\1\112\1\113\1\0\1\101\1\0\1\114\2\101\1\0"+
    "\2\101\1\115\26\0\7\27\1\240\4\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\3\0\3\27\34\0\1\241"+
    "\51\0\6\27\1\242\5\27\1\0\3\27\1\0\1\27"+
    "\1\0\1\27\3\0\3\27\43\0\1\243\42\0\14\27"+
    "\1\0\1\244\2\27\1\0\1\27\1\0\1\27\3\0"+
    "\3\27\2\0\14\64\1\135\1\64\1\65\1\66\1\65"+
    "\1\67\1\70\1\71\5\64\1\72\2\64\1\73\3\64"+
    "\1\74\1\64\1\75\1\76\1\0\2\64\1\77\5\64"+
    "\1\100\27\0\1\142\1\0\1\245\30\0\14\64\1\135"+
    "\1\64\1\65\1\66\1\65\1\67\1\70\1\71\1\64"+
    "\1\146\1\64\1\246\1\64\1\72\2\64\1\73\3\64"+
    "\1\74\1\64\1\75\1\76\1\0\1\64\1\0\1\77"+
    "\5\64\1\100\26\0\1\247\33\0\14\64\1\135\1\64"+
    "\1\65\1\66\1\65\1\67\1\204\1\71\5\64\1\72"+
    "\2\64\1\73\3\64\1\74\1\64\1\75\1\76\1\145"+
    "\1\64\1\0\1\230\1\204\4\64\1\100\26\0\1\250"+
    "\33\0\16\101\1\102\1\103\1\102\1\104\1\105\1\106"+
    "\5\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\0\2\101\1\114\2\101\1\0\2\101\1\115"+
    "\27\0\1\153\1\0\1\251\30\0\16\101\1\102\1\103"+
    "\1\102\1\104\1\105\1\106\1\101\1\157\1\101\1\252"+
    "\1\101\1\107\2\101\1\110\3\101\1\111\1\101\1\112"+
    "\1\113\1\0\1\101\1\0\1\114\2\101\1\0\2\101"+
    "\1\115\26\0\1\253\33\0\16\101\1\102\1\103\1\102"+
    "\1\104\1\214\1\106\5\101\1\107\2\101\1\110\3\101"+
    "\1\111\1\101\1\112\1\113\1\156\1\101\1\0\1\236"+
    "\1\214\1\101\1\0\2\101\1\115\26\0\1\254\66\0"+
    "\1\255\50\0\7\27\1\256\4\27\1\0\3\27\1\0"+
    "\1\27\1\0\1\27\3\0\3\27\34\0\1\257\25\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\1\260\1\64\1\73\3\64\1\74"+
    "\1\64\1\75\1\76\1\0\1\64\1\0\1\77\5\64"+
    "\1\100\43\0\1\64\43\0\1\64\13\0\1\64\50\0"+
    "\1\261\25\0\16\101\1\102\1\103\1\102\1\104\1\105"+
    "\1\106\5\101\1\107\1\262\1\101\1\110\3\101\1\111"+
    "\1\101\1\112\1\113\1\0\1\101\1\0\1\114\2\101"+
    "\1\0\2\101\1\115\43\0\1\101\43\0\1\101\13\0"+
    "\1\101\62\0\1\263\37\0\14\27\1\0\3\27\1\263"+
    "\1\27\1\0\1\27\3\0\3\27\35\0\1\264\24\0"+
    "\14\64\1\135\1\64\1\65\1\66\1\65\1\67\1\70"+
    "\1\71\5\64\1\72\1\64\1\265\1\73\3\64\1\74"+
    "\1\64\1\75\1\76\1\0\1\64\1\0\1\77\5\64"+
    "\1\100\35\0\1\266\24\0\16\101\1\102\1\103\1\102"+
    "\1\104\1\105\1\106\5\101\1\107\1\101\1\267\1\110"+
    "\3\101\1\111\1\101\1\112\1\113\1\0\1\101\1\0"+
    "\1\114\2\101\1\0\2\101\1\115\47\0\1\270\56\0"+
    "\1\271\13\0\14\64\1\135\1\64\1\65\1\66\1\65"+
    "\1\67\1\70\1\71\5\64\1\72\2\64\1\73\3\64"+
    "\1\74\1\64\1\75\1\76\1\271\1\64\1\0\1\77"+
    "\5\64\1\100\46\0\1\272\13\0\16\101\1\102\1\103"+
    "\1\102\1\104\1\105\1\106\5\101\1\107\2\101\1\110"+
    "\3\101\1\111\1\101\1\112\1\113\1\272\1\101\1\0"+
    "\1\114\2\101\1\0\2\101\1\115\41\0\1\273\65\0"+
    "\1\274\57\0\1\275\35\0\1\276\30\0\1\276\42\0"+
    "\1\277\57\0\1\300\45\0\1\301\55\0\1\302\30\0"+
    "\1\302\26\0\1\303\30\0\1\303\36\0\1\304\51\0"+
    "\1\305\57\0\1\306\65\0\1\64\57\0\1\101\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\16\11\17\1\2\11\2\1\2\0\2\11\1\0"+
    "\6\1\1\0\2\1\1\0\2\1\15\0\2\1\4\0"+
    "\2\1\1\0\4\1\1\11\5\1\3\0\1\1\1\0"+
    "\4\1\13\0\3\1\1\0\2\1\1\0\4\1\1\0"+
    "\2\1\1\11\1\0\1\11\1\1\1\11\3\1\10\0"+
    "\2\1\4\0\3\1\1\11\1\0\1\1\1\0\1\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\5\0\1\1\3\0\1\1"+
    "\3\0\1\1\4\0\1\1\14\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    Config cf = new Config();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline)+" y columna: "+(yycolumn);
        System.out.println(errLex);
            } 
            // fall through
          case 36: break;
          case 2: 
            { return new Symbol(sym.PAR_IZQ,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 37: break;
          case 3: 
            { return new Symbol(sym.PAR_DER,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 38: break;
          case 4: 
            { return new Symbol(sym.COR_IZQ,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 39: break;
          case 5: 
            { return new Symbol(sym.COR_DER,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 40: break;
          case 6: 
            { return new Symbol(sym.PTCOMA,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 41: break;
          case 7: 
            { return new Symbol(sym.DOSPT,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 42: break;
          case 8: 
            { return new Symbol(sym.LLI,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 43: break;
          case 9: 
            { return new Symbol(sym.LLC,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 44: break;
          case 10: 
            { return new Symbol(sym.COMS,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 45: break;
          case 11: 
            { return new Symbol(sym.COMD,             yyline, yycolumn,yytext());
            } 
            // fall through
          case 46: break;
          case 12: 
            { return new Symbol(sym.MAS,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 47: break;
          case 13: 
            { return new Symbol(sym.MENOS,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 48: break;
          case 14: 
            { return new Symbol(sym.POR,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 49: break;
          case 15: 
            { return new Symbol(sym.DIV,              yyline, yycolumn,yytext());
            } 
            // fall through
          case 50: break;
          case 16: 
            { return new Symbol(sym.RELACIONES,       yyline, yycolumn,yytext());
            } 
            // fall through
          case 51: break;
          case 17: 
            { return new Symbol(sym.IGUAL,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 52: break;
          case 18: 
            { return new Symbol(sym.LOGICAS,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 53: break;
          case 19: 
            { return new Symbol(sym.identificador,    yyline, yycolumn,yytext());
            } 
            // fall through
          case 54: break;
          case 20: 
            { return new Symbol(sym.ENTERO,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 55: break;
          case 21: 
            { /*Espacios en blanco, ignorados*/
            } 
            // fall through
          case 56: break;
          case 22: 
            { /*Saltos de linea, ignorados*/
            } 
            // fall through
          case 57: break;
          case 23: 
            { /*Comentario una linea, ignorados*/
            } 
            // fall through
          case 58: break;
          case 24: 
            { return new Symbol(sym.varINT,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 59: break;
          case 25: 
            { return new Symbol(sym.DECIMAL,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 60: break;
          case 26: 
            { return new Symbol(sym.varBOOL,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 61: break;
          case 27: 
            { return new Symbol(sym.varCHAR,          yyline, yycolumn,yytext());
            } 
            // fall through
          case 62: break;
          case 28: 
            { return new Symbol(sym.wCase,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 63: break;
          case 29: 
            { return new Symbol(sym.wVoid,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 64: break;
          case 30: 
            { return new Symbol(sym.wMain,            yyline, yycolumn,yytext());
            } 
            // fall through
          case 65: break;
          case 31: 
            { /*Comentario multilinea, ignorados*/
            } 
            // fall through
          case 66: break;
          case 32: 
            { return new Symbol(sym.wBreak,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 67: break;
          case 33: 
            { return new Symbol(sym.varDOUBLE,        yyline, yycolumn,yytext());
            } 
            // fall through
          case 68: break;
          case 34: 
            { return new Symbol(sym.varSTRING,        yyline, yycolumn,yytext());
            } 
            // fall through
          case 69: break;
          case 35: 
            { return new Symbol(sym.wPrint,           yyline, yycolumn,yytext());
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
